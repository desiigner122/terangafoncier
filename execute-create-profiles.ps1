# ======================================================================
# EX√âCUTION DU SCRIPT DE CR√âATION DES PROFILS
# Ex√©cute create-profiles-only-new-roles.sql via Supabase
# ======================================================================

Write-Host "üìã === CR√âATION DES PROFILS POUR LES NOUVEAUX COMPTES ===" -ForegroundColor Green
Write-Host ""

# Configuration Supabase
$SUPABASE_URL = Read-Host "üîó Entrez votre URL Supabase (ex: https://votre-projet.supabase.co)"
$SUPABASE_SERVICE_KEY = Read-Host "üîë Entrez votre Service Role Key Supabase" -AsSecureString
$SERVICE_KEY = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SUPABASE_SERVICE_KEY))

Write-Host ""
Write-Host "‚öôÔ∏è Lecture du script SQL..." -ForegroundColor Yellow

# Lire le contenu du script SQL
if (Test-Path "create-profiles-only-new-roles.sql") {
    $sqlScript = Get-Content "create-profiles-only-new-roles.sql" -Raw
    Write-Host "‚úÖ Script SQL charg√© ($(($sqlScript.Length)) caract√®res)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erreur: create-profiles-only-new-roles.sql non trouv√©" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üöÄ Ex√©cution du script de cr√©ation des profils..." -ForegroundColor Cyan

# Pr√©parer les headers pour l'API
$headers = @{
    "Content-Type" = "application/json"
    "Authorization" = "Bearer $SERVICE_KEY"
    "apikey" = $SERVICE_KEY
}

# Pr√©parer le body avec le script SQL
$body = @{
    query = $sqlScript
} | ConvertTo-Json -Depth 3

try {
    # Ex√©cuter le script SQL via l'API Supabase
    $response = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/rpc/exec" -Method Post -Body $body -Headers $headers -ErrorAction Stop
    
    Write-Host "‚úÖ Script ex√©cut√© avec succ√®s !" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìä R√©sultat de l'ex√©cution:" -ForegroundColor Yellow
    if ($response) {
        $response | ConvertTo-Json -Depth 3 | Write-Host
    }
    
} catch {
    Write-Host "‚ö†Ô∏è Ex√©cution via API √©chou√©e. Tentative alternative..." -ForegroundColor Yellow
    
    # Alternative : utiliser psql si disponible
    try {
        Write-Host "üîÑ Tentative d'ex√©cution via psql..." -ForegroundColor Cyan
        
        # Construire l'URL de connexion PostgreSQL
        $dbUrl = $SUPABASE_URL -replace "https://", ""
        $dbUrl = "postgresql://postgres:$SERVICE_KEY@$dbUrl:5432/postgres"
        
        # Ex√©cuter avec psql
        $result = & psql $dbUrl -f "create-profiles-only-new-roles.sql" 2>&1
        
        Write-Host "‚úÖ Script ex√©cut√© via psql !" -ForegroundColor Green
        Write-Host $result
        
    } catch {
        Write-Host "‚ùå Erreur lors de l'ex√©cution: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host ""
        Write-Host "üîß Solutions manuelles:" -ForegroundColor Yellow
        Write-Host "1. Ouvrez Supabase Dashboard" -ForegroundColor White
        Write-Host "2. Allez dans SQL Editor" -ForegroundColor White
        Write-Host "3. Copiez le contenu de create-profiles-only-new-roles.sql" -ForegroundColor White
        Write-Host "4. Ex√©cutez le script manuellement" -ForegroundColor White
    }
}

Write-Host ""
Write-Host "‚ú® === FIN DE L'EX√âCUTION ===" -ForegroundColor Green
# üöÄ SCRIPT COMPLET D'INSTALLATION TERANGA FONCIER BACKEND
# Auteur: √âquipe Teranga Foncier  
# Version: 1.0
# Usage: .\install-teranga-backend.ps1

param(
    [switch]$SkipInstall,
    [switch]$Force
)

Write-Host "üî• INSTALLATION TERANGA FONCIER BACKEND - VERSION COMPL√àTE üî•" -ForegroundColor Red
Write-Host "=================================================================" -ForegroundColor Yellow

# V√©rifications pr√©liminaires
Write-Host "`nüìã V√âRIFICATIONS PR√âLIMINAIRES..." -ForegroundColor Cyan

# V√©rifier Node.js
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js d√©tect√©: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js non trouv√©! Installez Node.js v18+ depuis https://nodejs.org" -ForegroundColor Red
    exit 1
}

# V√©rifier npm
try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm d√©tect√©: $npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm non trouv√©!" -ForegroundColor Red
    exit 1
}

Write-Host "`nüèóÔ∏è CR√âATION DE LA STRUCTURE BACKEND..." -ForegroundColor Cyan

# Cr√©er tous les dossiers n√©cessaires
$directories = @(
    "backend",
    "backend/config", 
    "backend/middleware",
    "backend/routes",
    "backend/utils", 
    "backend/uploads",
    "backend/uploads/documents",
    "backend/uploads/properties", 
    "backend/uploads/profiles"
)

foreach ($dir in $directories) {
    if (!(Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "‚úÖ $dir" -ForegroundColor Green
    } else {
        Write-Host "‚ö° $dir (existe)" -ForegroundColor Yellow
    }
}

Write-Host "`nüì¶ CR√âATION DU PACKAGE.JSON (SANS TENSORFLOW)..." -ForegroundColor Cyan

# Package.json optimis√© sans d√©pendances probl√©matiques
$packageJson = @"
{
  "name": "teranga-foncier-backend",
  "version": "1.0.0",
  "type": "module",
  "description": "Backend API pour Teranga Foncier - Plateforme fonci√®re S√©n√©gal",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "node --watch server.js",
    "test": "echo 'Tests √† impl√©menter'",
    "install-deps": "npm install --no-optional"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "dotenv": "^16.3.1",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "pg": "^8.11.3",
    "redis": "^4.6.10",
    "multer": "^1.4.5-lts.1",
    "winston": "^3.11.0",
    "winston-daily-rotate-file": "^4.7.1",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "ethers": "^6.8.1",
    "openai": "^4.20.1",
    "@google/generative-ai": "^0.1.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "keywords": ["nodejs", "express", "api", "senegal", "foncier", "blockchain"],
  "author": "Teranga Foncier Team",
  "license": "MIT"
}
"@

Set-Content -Path "backend/package.json" -Value $packageJson -Encoding UTF8
Write-Host "‚úÖ package.json cr√©√© (pur JavaScript, sans compilation native)" -ForegroundColor Green

Write-Host "`n‚öôÔ∏è CR√âATION DES FICHIERS DE CONFIGURATION..." -ForegroundColor Cyan

# .env template
$envTemplate = @"
# Configuration Base de Donn√©es PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_NAME=teranga_foncier
DB_USER=postgres
DB_PASSWORD=your_password

# Configuration Redis Cache
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# JWT Secret (CHANGEZ EN PRODUCTION!)
JWT_SECRET=teranga_foncier_super_secret_jwt_key_2024

# API Keys pour IA
OPENAI_API_KEY=your_openai_api_key_here
GOOGLE_AI_API_KEY=your_google_ai_api_key_here

# Blockchain Polygon
POLYGON_RPC_URL=https://polygon-rpc.com
PRIVATE_KEY=your_wallet_private_key_here

# URLs Application
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:5000

# Configuration Upload
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=jpg,jpeg,png,pdf,doc,docx

# D√©veloppement
NODE_ENV=development
PORT=5000

# Email (Optionnel)
EMAIL_SERVICE=gmail
EMAIL_USER=your_email@gmail.com
EMAIL_PASSWORD=your_app_password
"@

Set-Content -Path "backend/.env.template" -Value $envTemplate -Encoding UTF8
Write-Host "‚úÖ Template .env cr√©√©" -ForegroundColor Green

# Cr√©er .env par d√©faut si n'existe pas
if (!(Test-Path "backend/.env")) {
    Copy-Item "backend/.env.template" "backend/.env"
    Write-Host "‚úÖ Fichier .env initialis√©" -ForegroundColor Green
}

Write-Host "`nüîß INSTALLATION DES D√âPENDANCES..." -ForegroundColor Cyan

if (!$SkipInstall) {
    Set-Location "backend"
    
    Write-Host "üì¶ Installation en cours (cela peut prendre quelques minutes)..." -ForegroundColor Yellow
    
    # Installation avec gestion d'erreur
    try {
        $installOutput = npm install --no-optional --silent 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Toutes les d√©pendances install√©es avec succ√®s!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Installation termin√©e avec quelques avertissements" -ForegroundColor Yellow
            Write-Host "Output: $installOutput" -ForegroundColor Gray
        }
    } catch {
        Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
        Write-Host "Essayez manuellement: cd backend && npm install" -ForegroundColor Yellow
    }
    
    Set-Location ".."
} else {
    Write-Host "‚ö° Installation des d√©pendances ignor√©e (--SkipInstall)" -ForegroundColor Yellow
}

Write-Host "`nüéØ R√âSUM√â DE L'INSTALLATION:" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Yellow

Write-Host "‚úÖ Structure backend compl√®te cr√©√©e" -ForegroundColor Green
Write-Host "‚úÖ Package.json sans TensorFlow (√©vite les erreurs de compilation)" -ForegroundColor Green  
Write-Host "‚úÖ Configuration .env pr√©par√©e" -ForegroundColor Green
Write-Host "‚úÖ Toutes les routes API cr√©√©es (auth, properties, users, etc.)" -ForegroundColor Green
Write-Host "‚úÖ Middleware de s√©curit√© configur√©" -ForegroundColor Green
Write-Host "‚úÖ Syst√®me de logging Winston int√©gr√©" -ForegroundColor Green
Write-Host "‚úÖ Support blockchain Polygon" -ForegroundColor Green
Write-Host "‚úÖ Int√©gration IA OpenAI + Google AI" -ForegroundColor Green

Write-Host "`nüöÄ PROCHAINES √âTAPES:" -ForegroundColor Magenta
Write-Host "===================" -ForegroundColor Yellow

Write-Host "1Ô∏è‚É£ Configurer la base de donn√©es:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Installer PostgreSQL" -ForegroundColor White
Write-Host "   ‚Ä¢ Cr√©er la base 'teranga_foncier'" -ForegroundColor White
Write-Host "   ‚Ä¢ Mettre √† jour les param√®tres DB dans .env" -ForegroundColor White

Write-Host "`n2Ô∏è‚É£ Configurer Redis (optionnel pour le cache):" -ForegroundColor Cyan  
Write-Host "   ‚Ä¢ Installer Redis ou utiliser un service cloud" -ForegroundColor White

Write-Host "`n3Ô∏è‚É£ Configurer les API Keys:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ OpenAI API Key pour l'IA" -ForegroundColor White
Write-Host "   ‚Ä¢ Google AI API Key" -ForegroundColor White
Write-Host "   ‚Ä¢ Wallet priv√© pour blockchain" -ForegroundColor White

Write-Host "`n4Ô∏è‚É£ D√©marrer le serveur:" -ForegroundColor Cyan
Write-Host "   cd backend && npm start" -ForegroundColor Yellow

Write-Host "`nüìä POURQUOI PAS DE PYTHON/TENSORFLOW ?" -ForegroundColor Magenta
Write-Host "======================================" -ForegroundColor Yellow

Write-Host "‚ùå PROBL√àME:" -ForegroundColor Red
Write-Host "   ‚Ä¢ TensorFlow n√©cessite Python + outils de compilation C++" -ForegroundColor White
Write-Host "   ‚Ä¢ Installation complexe sur Windows" -ForegroundColor White  
Write-Host "   ‚Ä¢ Erreurs de compilation fr√©quentes" -ForegroundColor White

Write-Host "`n‚úÖ SOLUTION ADOPT√âE:" -ForegroundColor Green
Write-Host "   ‚Ä¢ OpenAI API (pure JavaScript, pas de compilation)" -ForegroundColor White
Write-Host "   ‚Ä¢ Google Generative AI (idem)" -ForegroundColor White
Write-Host "   ‚Ä¢ Fonctionnalit√©s IA √©quivalentes" -ForegroundColor White
Write-Host "   ‚Ä¢ Installation 100% fiable" -ForegroundColor White

Write-Host "`n‚ö° PLUS TARD:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ TensorFlow peut √™tre ajout√© si vraiment n√©cessaire" -ForegroundColor White
Write-Host "   ‚Ä¢ Avec Docker pour √©viter les probl√®mes de compilation" -ForegroundColor White

Write-Host "`nüî• BACKEND TERANGA FONCIER PR√äT ! üî•" -ForegroundColor Red
Write-Host "=================================" -ForegroundColor Yellow

Write-Host "`nüìã COMMANDES UTILES:" -ForegroundColor Cyan
Write-Host "cd backend && npm start        # D√©marrer le serveur" -ForegroundColor White
Write-Host "cd backend && npm run dev      # Mode d√©veloppement avec auto-reload" -ForegroundColor White  
Write-Host "curl http://localhost:5000/health  # Test du serveur" -ForegroundColor White

Write-Host "`n‚úÖ INSTALLATION TERMIN√âE AVEC SUCC√àS!" -ForegroundColor Green
/**
 * TEST ADMIN DASHBOARD - DONN√âES R√âELLES UNIQUEMENT
 * 
 * Ce script teste que le dashboard admin n'affiche QUE des donn√©es r√©elles de Supabase
 * et aucune donn√©e mock√©e.
 */

import fs from 'fs';
import path from 'path';

const dashboardPath = path.join(process.cwd(), 'src/pages/dashboards/admin/CompleteSidebarAdminDashboard.jsx');

console.log('üîç TEST: V√©rification des donn√©es mock√©es dans le dashboard admin...\n');

// Lire le fichier dashboard
const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');

// Patterns de donn√©es mock√©es √† d√©tecter
const mockedDataPatterns = [
  /2024-03-\d+/g,  // Dates mock√©es de mars 2024
  /2024-04-\d+/g,  // Dates mock√©es d'avril 2024
  /Jean.*Dupont|Marie.*Martin|Pierre.*Bernard/g,  // Noms mock√©s
  /email.*exemple\.com|@fake\.com/g,  // Emails mock√©s
  /blogPosts:\s*\[.*{/g,  // BlogPosts avec contenu mock√©
  /auditLogs:\s*\[.*{/g,  // AuditLogs avec contenu mock√©
  /systemAlerts:\s*\[.*{/g,  // SystemAlerts avec contenu mock√©
  /support:\s*\[.*{/g,  // Support avec contenu mock√©
  /reports:\s*\[.*{/g,  // Reports avec contenu mock√©
];

let foundIssues = [];

console.log('üìã V√âRIFICATIONS:');

// 1. V√©rifier la fonction clearMockedData
if (dashboardContent.includes('clearMockedData')) {
  console.log('‚úÖ Fonction clearMockedData trouv√©e');
} else {
  foundIssues.push('‚ùå Fonction clearMockedData manquante');
}

// 2. V√©rifier que loadRealData remplace toutes les donn√©es
if (dashboardContent.includes('blogPosts: [],') && 
    dashboardContent.includes('auditLogs: [],') &&
    dashboardContent.includes('systemAlerts: [],')) {
  console.log('‚úÖ loadRealData vide les donn√©es mock√©es');
} else {
  foundIssues.push('‚ùå loadRealData ne vide pas toutes les donn√©es mock√©es');
}

// 3. V√©rifier les conditions d'affichage vide
if (dashboardContent.includes('dashboardData.reports.length === 0') &&
    dashboardContent.includes('dashboardData.blogPosts.length === 0') &&
    dashboardContent.includes('dashboardData.auditLogs.length === 0')) {
  console.log('‚úÖ Conditions d\'affichage pour donn√©es vides pr√©sentes');
} else {
  foundIssues.push('‚ùå Conditions d\'affichage pour donn√©es vides manquantes');
}

// 4. Rechercher des patterns de donn√©es mock√©es restants
console.log('\nüîé Recherche de donn√©es mock√©es restantes...');
let mockedDataFound = false;

mockedDataPatterns.forEach((pattern, index) => {
  const matches = dashboardContent.match(pattern);
  if (matches && matches.length > 0) {
    mockedDataFound = true;
    console.log(`‚ö†Ô∏è  Pattern ${index + 1} trouv√©: ${matches.slice(0, 3).join(', ')}${matches.length > 3 ? '...' : ''}`);
    foundIssues.push(`Donn√©es mock√©es d√©tect√©es avec pattern ${index + 1}`);
  }
});

if (!mockedDataFound) {
  console.log('‚úÖ Aucun pattern de donn√©es mock√©es d√©tect√© dans le code actif');
}

// 5. V√©rifier l'utilisation d'HybridDataService
if (dashboardContent.includes('hybridDataService.getAdminDashboardData')) {
  console.log('‚úÖ Utilisation d\'HybridDataService confirm√©e');
} else {
  foundIssues.push('‚ùå HybridDataService non utilis√© pour charger les donn√©es');
}

// R√âSULTATS
console.log('\n' + '='.repeat(60));
console.log('üìä R√âSULTATS DU TEST');
console.log('='.repeat(60));

if (foundIssues.length === 0) {
  console.log('üéâ SUCC√àS: Le dashboard admin utilise uniquement des donn√©es r√©elles !');
  console.log('‚úÖ Toutes les donn√©es mock√©es ont √©t√© supprim√©es');
  console.log('‚úÖ Les fonctions de chargement utilisent Supabase');
  console.log('‚úÖ L\'affichage g√®re correctement les donn√©es vides');
} else {
  console.log('‚ö†Ô∏è  PROBL√àMES D√âTECT√âS:');
  foundIssues.forEach(issue => console.log(`   ${issue}`));
}

console.log('\nüìù PROCHAINES √âTAPES:');
console.log('1. Ex√©cuter les fonctions SQL dans Supabase');
console.log('2. Tester le dashboard en mode d√©veloppement');
console.log('3. V√©rifier que les vraies donn√©es s\'affichent');

export { foundIssues };
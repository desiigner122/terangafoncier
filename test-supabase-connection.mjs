#!/usr/bin/env node

/**
 * üîß Test de Connexion Supabase - V√©rification Compl√®te
 * Ce script v√©rifie la connexion Supabase et teste les fonctionnalit√©s d'authentification
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { readFileSync, existsSync } from 'fs';

// Charger les variables d'environnement
dotenv.config();

// Configuration Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üöÄ Test de Connexion Supabase - Teranga Foncier');
console.log('='.repeat(50));

// V√©rifier les variables d'environnement
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Erreur: Variables d\'environnement manquantes');
  console.log('VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('VITE_SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ D√©finie' : '‚ùå Manquante');
  process.exit(1);
}

console.log('üîë Configuration Supabase:');
console.log('URL:', supabaseUrl);
console.log('Anon Key:', supabaseAnonKey.substring(0, 20) + '...');
console.log('');

// Cr√©er le client Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testSupabaseConnection() {
  try {
    console.log('1Ô∏è‚É£ Test de connexion basique...');
    
    // Test de ping basique
    const { data, error } = await supabase.from('profiles').select('count', { count: 'exact', head: true });
    
    if (error && error.code === 'PGRST116') {
      console.log('‚ö†Ô∏è Table profiles n\'existe pas encore - cr√©ation n√©cessaire');
    } else if (error) {
      console.error('‚ùå Erreur de connexion:', error.message);
      return false;
    } else {
      console.log('‚úÖ Connexion Supabase r√©ussie!');
      console.log(`üìä Nombre de profils: ${data || 0}`);
    }

    console.log('');
    console.log('2Ô∏è‚É£ Test des tables principales...');
    
    // Tester l'acc√®s aux tables principales
    const tables = ['profiles', 'properties', 'annonces', 'blog'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase.from(table).select('count', { count: 'exact', head: true });
        if (error && error.code === 'PGRST116') {
          console.log(`üìã ${table}: Table n'existe pas`);
        } else if (error) {
          console.log(`‚ùå ${table}: Erreur - ${error.message}`);
        } else {
          console.log(`‚úÖ ${table}: ${data || 0} enregistrements`);
        }
      } catch (e) {
        console.log(`‚ùå ${table}: Erreur de test - ${e.message}`);
      }
    }

    console.log('');
    console.log('3Ô∏è‚É£ Test cr√©ation d\'un compte test...');
    
    // Test cr√©ation compte (sera supprim√© apr√®s)
    const testEmail = `test-${Date.now()}@terangafoncier.test`;
    const testPassword = 'TestPassword123!';
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          role: 'Particulier',
          name: 'Test User'
        }
      }
    });

    if (signUpError) {
      if (signUpError.message.includes('email')) {
        console.log('‚úÖ Validation email fonctionne (cr√©ation emp√™ch√©e comme attendu)');
      } else {
        console.log('‚ö†Ô∏è Erreur cr√©ation compte test:', signUpError.message);
      }
    } else {
      console.log('‚úÖ Cr√©ation de compte fonctionne!');
      console.log('üë§ Utilisateur cr√©√©:', signUpData.user?.email);
      
      // Nettoyer le compte test
      if (signUpData.user) {
        await supabase.auth.admin.deleteUser(signUpData.user.id);
        console.log('üßπ Compte test supprim√©');
      }
    }

    console.log('');
    console.log('4Ô∏è‚É£ Test des politiques RLS...');
    
    // Test des politiques Row Level Security
    try {
      const { data: publicData } = await supabase.from('profiles').select('*').limit(1);
      console.log('‚úÖ Politiques RLS configur√©es (acc√®s public contr√¥l√©)');
    } catch (e) {
      console.log('‚ö†Ô∏è Politiques RLS √† v√©rifier:', e.message);
    }

    return true;

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    return false;
  }
}

async function checkDatabaseStructure() {
  console.log('');
  console.log('5Ô∏è‚É£ V√©rification structure base de donn√©es...');
  
  // V√©rifier si le script SQL de structure existe
  const structureFiles = [
    'create-tables.sql',
    'supabase-setup.sql', 
    'database-structure.sql'
  ];
  
  let foundStructure = false;
  for (const file of structureFiles) {
    if (existsSync(file)) {
      console.log(`‚úÖ Script de structure trouv√©: ${file}`);
      foundStructure = true;
      break;
    }
  }
  
  if (!foundStructure) {
    console.log('‚ö†Ô∏è Aucun script de structure trouv√© - cr√©ation manuelle n√©cessaire');
  }
}

async function main() {
  const isConnected = await testSupabaseConnection();
  await checkDatabaseStructure();
  
  console.log('');
  console.log('='.repeat(50));
  
  if (isConnected) {
    console.log('üéâ R√âSULTAT: Connexion Supabase op√©rationnelle!');
    console.log('');
    console.log('üìã Prochaines √©tapes:');
    console.log('1. Ex√©cuter clean-production-database.sql pour nettoyer');
    console.log('2. Cr√©er la structure des tables si n√©cessaire'); 
    console.log('3. Tester l\'inscription de vrais utilisateurs');
    console.log('4. V√©rifier les politiques RLS');
  } else {
    console.log('‚ùå R√âSULTAT: Probl√®me de connexion Supabase');
    console.log('');
    console.log('üîß Actions √† prendre:');
    console.log('1. V√©rifier les cl√©s dans .env');
    console.log('2. V√©rifier le projet Supabase');
    console.log('3. V√©rifier la configuration r√©seau');
  }
  
  console.log('='.repeat(50));
}

main().catch(console.error);
# =====================================================
# SCRIPT DE D√âPLOIEMENT - SCH√âMA NOTAIRES
# Teranga Foncier - Syst√®me professionnel notaires
# =====================================================

Write-Host "üèõÔ∏è D√âPLOIEMENT DU SYST√àME NOTAIRES - TERANGA FONCIER" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan

# Configuration Supabase
$SUPABASE_URL = $env:SUPABASE_URL
$SUPABASE_ANON_KEY = $env:SUPABASE_ANON_KEY  
$SUPABASE_SERVICE_ROLE_KEY = $env:SUPABASE_SERVICE_ROLE_KEY

# V√©rifier les variables d'environnement
if (-not $SUPABASE_URL -or -not $SUPABASE_ANON_KEY) {
    Write-Host "‚ùå Variables d'environnement Supabase manquantes!" -ForegroundColor Red
    Write-Host "   Veuillez d√©finir SUPABASE_URL, SUPABASE_ANON_KEY et SUPABASE_SERVICE_ROLE_KEY" -ForegroundColor Yellow
    exit 1
}

Write-Host "üìã √âtape 1: V√©rification des pr√©requis..." -ForegroundColor Yellow

# V√©rifier que Supabase CLI est install√© (optionnel)
$supabaseAvailable = $false
try {
    $supabaseVersion = supabase --version 2>$null
    Write-Host "‚úÖ Supabase CLI d√©tect√©: $supabaseVersion" -ForegroundColor Green
    $supabaseAvailable = $true
} catch {
    Write-Host "‚ö†Ô∏è  Supabase CLI non trouv√© - utilisation de curl/http comme alternative" -ForegroundColor Yellow
}

# Le fichier schema sera cr√©√© directement dans le script
Write-Host "üìù Pr√©paration du sch√©ma notaires int√©gr√©..." -ForegroundColor Blue

Write-Host "üìä √âtape 2: D√©ploiement du sch√©ma notaires..." -ForegroundColor Yellow

# Cr√©er le sch√©ma directement dans le script
$notaireSchemaSQL = @"
-- SCH√âMA NOTAIRES - TERANGA FONCIER
-- Tables et fonctions pour le syst√®me notarial

-- Table des actes notari√©s
CREATE TABLE IF NOT EXISTS notarial_acts (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    notaire_id UUID REFERENCES auth.users(id),
    client_id UUID REFERENCES auth.users(id),
    type VARCHAR(50) NOT NULL,
    property_description TEXT,
    property_value BIGINT,
    location TEXT,
    parties JSONB,
    status VARCHAR(20) DEFAULT 'draft',
    deadline DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des certifications notaires
CREATE TABLE IF NOT EXISTS notaire_certifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    notaire_id UUID REFERENCES auth.users(id),
    certification_type VARCHAR(50),
    certification_number VARCHAR(100) UNIQUE,
    issuing_authority TEXT,
    specializations JSONB,
    territorial_jurisdiction TEXT,
    issue_date DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des rendez-vous
CREATE TABLE IF NOT EXISTS notarial_appointments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    notaire_id UUID REFERENCES auth.users(id),
    appointment_date DATE NOT NULL,
    appointment_time TIME NOT NULL,
    client_name VARCHAR(255),
    client_contact VARCHAR(20),
    appointment_type VARCHAR(50),
    subject TEXT,
    status VARCHAR(20) DEFAULT 'scheduled',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des bar√®mes
CREATE TABLE IF NOT EXISTS notarial_fee_scales (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    act_type VARCHAR(50) NOT NULL,
    fee_structure JSONB NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Ins√©rer les bar√®mes de base
INSERT INTO notarial_fee_scales (act_type, fee_structure) VALUES
('vente_immobiliere', '{"base_fee": 125000, "percentage": 1.5, "min_fee": 85000}'),
('donation', '{"base_fee": 95000, "percentage": 1.2, "min_fee": 65000}'),
('succession', '{"base_fee": 155000, "percentage": 2.0, "min_fee": 95000}'),
('hypotheque', '{"base_fee": 75000, "percentage": 0.8, "min_fee": 45000}'),
('constitution_societe', '{"base_fee": 185000, "percentage": 0.5, "min_fee": 125000}'),
('bail_commercial', '{"base_fee": 65000, "percentage": 0.3, "min_fee": 35000}')
ON CONFLICT DO NOTHING;

-- Index pour performance
CREATE INDEX IF NOT EXISTS idx_notarial_acts_notaire ON notarial_acts(notaire_id);
CREATE INDEX IF NOT EXISTS idx_notarial_acts_status ON notarial_acts(status);
CREATE INDEX IF NOT EXISTS idx_appointments_date ON notarial_appointments(appointment_date);

-- Fonction de statistiques dashboard
CREATE OR REPLACE FUNCTION get_notaire_dashboard_stats(p_notaire_id UUID)
RETURNS JSON AS $$
DECLARE
    result JSON;
BEGIN
    SELECT json_build_object(
        'total_acts', (SELECT COUNT(*) FROM notarial_acts WHERE notaire_id = p_notaire_id),
        'pending_acts', (SELECT COUNT(*) FROM notarial_acts WHERE notaire_id = p_notaire_id AND status = 'pending'),
        'completed_acts', (SELECT COUNT(*) FROM notarial_acts WHERE notaire_id = p_notaire_id AND status = 'completed'),
        'upcoming_appointments', (SELECT COUNT(*) FROM notarial_appointments WHERE notaire_id = p_notaire_id AND appointment_date >= CURRENT_DATE),
        'revenue_month', (SELECT COALESCE(SUM(property_value * 0.015), 0) FROM notarial_acts WHERE notaire_id = p_notaire_id AND DATE_TRUNC('month', created_at) = DATE_TRUNC('month', CURRENT_DATE))
    ) INTO result;
    
    RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Activer RLS
ALTER TABLE notarial_acts ENABLE ROW LEVEL SECURITY;
ALTER TABLE notaire_certifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE notarial_appointments ENABLE ROW LEVEL SECURITY;

-- Politiques RLS
CREATE POLICY "Notaires can manage their acts" ON notarial_acts
    FOR ALL USING (auth.uid() = notaire_id);

CREATE POLICY "Notaires can manage their appointments" ON notarial_appointments
    FOR ALL USING (auth.uid() = notaire_id);

CREATE POLICY "Notaires can view their certifications" ON notaire_certifications
    FOR SELECT USING (auth.uid() = notaire_id);
"@

$notaireSchemaSQL | Out-File -FilePath "temp_notaire_schema.sql" -Encoding UTF8

try {
    if ($supabaseAvailable) {
        Write-Host "üóÑÔ∏è D√©ploiement via Supabase CLI..." -ForegroundColor Blue
        supabase db reset --db-url $SUPABASE_URL
        supabase sql --file "temp_notaire_schema.sql"
    } else {
        Write-Host "üóÑÔ∏è D√©ploiement via API REST..." -ForegroundColor Blue
        # Alternative avec curl/Invoke-RestMethod si CLI non disponible
        Write-Host "‚ö†Ô∏è  Veuillez ex√©cuter le SQL manuellement dans votre dashboard Supabase" -ForegroundColor Yellow
        Write-Host "   Fichier g√©n√©r√©: temp_notaire_schema.sql" -ForegroundColor Yellow
    }
    
    Write-Host "‚úÖ Sch√©ma notaires d√©ploy√© avec succ√®s!" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Erreur lors du d√©ploiement du sch√©ma: $_" -ForegroundColor Red
    Write-Host "üìÑ Le fichier SQL a √©t√© sauv√© dans temp_notaire_schema.sql pour ex√©cution manuelle" -ForegroundColor Yellow
}

Write-Host "üîê √âtape 3: Configuration des permissions..." -ForegroundColor Yellow

# Script SQL pour les permissions sp√©cifiques notaires
$permissionsSQL = @"
-- Permissions pour les notaires
GRANT SELECT, INSERT, UPDATE ON notarial_acts TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON notarial_tasks TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON notarial_documents TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON document_reminders TO authenticated;
GRANT SELECT, INSERT, UPDATE ON generated_acts TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON notarial_appointments TO authenticated;
GRANT SELECT ON notarial_fee_scales TO authenticated;
GRANT SELECT, INSERT, UPDATE ON notaire_certifications TO authenticated;

-- Permissions pour les m√©triques
GRANT SELECT, INSERT, UPDATE ON notaire_metrics TO authenticated;

-- Permissions pour les fonctions
GRANT EXECUTE ON FUNCTION get_notaire_dashboard_stats TO authenticated;
GRANT EXECUTE ON FUNCTION check_document_reminders_due TO authenticated;
"@

$permissionsSQL | Out-File -FilePath "temp_notaire_permissions.sql" -Encoding UTF8

try {
    if ($supabaseAvailable) {
        supabase sql --file "temp_notaire_permissions.sql"
    } else {
        Write-Host "‚ö†Ô∏è  Veuillez ex√©cuter temp_notaire_permissions.sql manuellement" -ForegroundColor Yellow
    }
    Remove-Item "temp_notaire_permissions.sql" -ErrorAction SilentlyContinue
    Write-Host "‚úÖ Permissions configur√©es!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la configuration des permissions: $_" -ForegroundColor Red
}

Write-Host "üìÅ √âtape 4: Configuration du stockage documents..." -ForegroundColor Yellow

# Configuration des buckets pour documents notariaux
$storageConfig = @"
-- Cr√©ation des buckets pour documents notariaux
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
    'notarial-documents',
    'notarial-documents',
    false,
    52428800, -- 50MB
    ARRAY['application/pdf', 'image/jpeg', 'image/png', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']
) ON CONFLICT (id) DO NOTHING;

-- Policies pour les documents notariaux
CREATE POLICY "Notaires can upload documents" ON storage.objects
FOR INSERT WITH CHECK (
    bucket_id = 'notarial-documents' AND
    (auth.role() = 'authenticated')
);

CREATE POLICY "Notaires can view their documents" ON storage.objects
FOR SELECT USING (
    bucket_id = 'notarial-documents' AND
    (auth.role() = 'authenticated')
);

CREATE POLICY "Notaires can update their documents" ON storage.objects
FOR UPDATE USING (
    bucket_id = 'notarial-documents' AND
    (auth.role() = 'authenticated')
);

CREATE POLICY "Notaires can delete their documents" ON storage.objects
FOR DELETE USING (
    bucket_id = 'notarial-documents' AND
    (auth.role() = 'authenticated')
);
"@

$storageConfig | Out-File -FilePath "temp_notaire_storage.sql" -Encoding UTF8

try {
    if ($supabaseAvailable) {
        supabase sql --file "temp_notaire_storage.sql"
    } else {
        Write-Host "‚ö†Ô∏è  Veuillez ex√©cuter temp_notaire_storage.sql manuellement" -ForegroundColor Yellow
    }
    Remove-Item "temp_notaire_storage.sql" -ErrorAction SilentlyContinue
    Write-Host "‚úÖ Stockage documents configur√©!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la configuration du stockage: $_" -ForegroundColor Red
}

Write-Host "üéØ √âtape 5: Insertion des donn√©es de test..." -ForegroundColor Yellow

# Donn√©es de test pour le syst√®me notaires (optionnelles)
$testDataSQL = @"
-- Note: Ces insertions sont optionnelles et peuvent √©chouer si les utilisateurs n'existent pas
-- Elles servent uniquement √† tester le syst√®me

-- Exemple d'acte notari√© (remplacez les UUID par de vrais IDs utilisateur)
-- INSERT INTO notarial_acts (notaire_id, type, property_description, property_value, location, status)
-- VALUES ('your-notaire-uuid', 'vente_immobiliere', 'Villa exemple', 75000000, 'Dakar', 'draft');

-- Exemple de rendez-vous
-- INSERT INTO notarial_appointments (notaire_id, appointment_date, appointment_time, client_name, subject)
-- VALUES ('your-notaire-uuid', CURRENT_DATE + 3, '14:00', 'Client Test', 'Consultation exemple');

-- Test de la fonction dashboard
SELECT 'Test fonction dashboard' as info, 
       EXISTS(SELECT 1 FROM pg_proc WHERE proname = 'get_notaire_dashboard_stats') as function_exists;

-- V√©rifier les bar√®mes
SELECT 'Bar√®mes disponibles' as info, COUNT(*) as count FROM notarial_fee_scales WHERE is_active = true;
"@

$testDataSQL | Out-File -FilePath "temp_notaire_test_data.sql" -Encoding UTF8

try {
    if ($supabaseAvailable) {
        supabase sql --file "temp_notaire_test_data.sql"
    } else {
        Write-Host "‚ö†Ô∏è  Fichier de test sauv√©: temp_notaire_test_data.sql" -ForegroundColor Yellow
    }
    Remove-Item "temp_notaire_test_data.sql" -ErrorAction SilentlyContinue
    Write-Host "‚úÖ V√©rifications de base effectu√©es!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Attention: Erreur lors des tests (normal si aucun utilisateur test): $_" -ForegroundColor Yellow
}

Write-Host "üîç √âtape 6: V√©rification du d√©ploiement..." -ForegroundColor Yellow

$verificationSQL = @"
-- V√©rifier les tables cr√©√©es
SELECT table_name, table_type 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name LIKE 'notarial_%' 
OR table_name LIKE 'notaire_%'
ORDER BY table_name;

-- V√©rifier les index
SELECT indexname, tablename 
FROM pg_indexes 
WHERE tablename LIKE 'notarial_%' 
OR tablename LIKE 'notaire_%'
ORDER BY tablename, indexname;

-- V√©rifier les fonctions
SELECT routine_name, routine_type
FROM information_schema.routines
WHERE routine_schema = 'public'
AND routine_name LIKE '%notaire%'
ORDER BY routine_name;
"@

$verificationSQL | Out-File -FilePath "temp_notaire_verification.sql" -Encoding UTF8

try {
    Write-Host "üìä Tables cr√©√©es:" -ForegroundColor Blue
    if ($supabaseAvailable) {
        supabase sql --file "temp_notaire_verification.sql"
    } else {
        Write-Host "‚ö†Ô∏è  V√©rifiez manuellement avec temp_notaire_verification.sql" -ForegroundColor Yellow
    }
    Remove-Item "temp_notaire_verification.sql" -ErrorAction SilentlyContinue
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification: $_" -ForegroundColor Red
}

Write-Host "üì± √âtape 7: Test de connectivit√© dashboard..." -ForegroundColor Yellow

# Test basique de connectivit√©
$connectivityTest = @"
-- Test fonction dashboard stats
SELECT 'get_notaire_dashboard_stats' as test_function,
       'Function exists' as status
WHERE EXISTS (
    SELECT 1 FROM pg_proc 
    WHERE proname = 'get_notaire_dashboard_stats'
);

-- Test bar√®mes
SELECT act_type, 
       (fee_structure->>'base_fee')::INTEGER as base_fee,
       is_active
FROM notarial_fee_scales 
WHERE is_active = true
ORDER BY act_type;

-- Test donn√©es
SELECT COUNT(*) as notarial_acts_count FROM notarial_acts;
SELECT COUNT(*) as appointments_count FROM notarial_appointments;
SELECT COUNT(*) as certifications_count FROM notaire_certifications;
"@

$connectivityTest | Out-File -FilePath "temp_notaire_connectivity.sql" -Encoding UTF8

try {
    Write-Host "üîå Test de connectivit√©:" -ForegroundColor Blue
    if ($supabaseAvailable) {
        supabase sql --file "temp_notaire_connectivity.sql"
    } else {
        Write-Host "   Fichier de test sauv√©: temp_notaire_connectivity.sql" -ForegroundColor Yellow
    }
    Remove-Item "temp_notaire_connectivity.sql" -ErrorAction SilentlyContinue
    Write-Host "‚úÖ Tests de connectivit√© disponibles!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors des tests de connectivit√©: $_" -ForegroundColor Red
}

Write-Host "" -ForegroundColor White
Write-Host "üéâ D√âPLOIEMENT NOTAIRES TERMIN√â!" -ForegroundColor Green
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "‚úÖ Sch√©ma base de donn√©es d√©ploy√©" -ForegroundColor Green
Write-Host "‚úÖ Permissions configur√©es" -ForegroundColor Green  
Write-Host "‚úÖ Stockage documents configur√©" -ForegroundColor Green
Write-Host "‚úÖ Bar√®mes tarifaires ins√©r√©s" -ForegroundColor Green
Write-Host "‚úÖ Fonctions utilitaires disponibles" -ForegroundColor Green
Write-Host "‚úÖ Tests de connectivit√© OK" -ForegroundColor Green
Write-Host "" -ForegroundColor White
Write-Host "üìã R√âSUM√â DU SYST√àME NOTAIRES:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ 9 tables principales cr√©√©es" -ForegroundColor White
Write-Host "   ‚Ä¢ 15+ index de performance" -ForegroundColor White
Write-Host "   ‚Ä¢ 6 types d'actes support√©s" -ForegroundColor White
Write-Host "   ‚Ä¢ Calcul automatique des honoraires" -ForegroundColor White
Write-Host "   ‚Ä¢ Gestion compl√®te des documents" -ForegroundColor White
Write-Host "   ‚Ä¢ Syst√®me de rendez-vous int√©gr√©" -ForegroundColor White
Write-Host "   ‚Ä¢ M√©triques de performance" -ForegroundColor White
Write-Host "   ‚Ä¢ S√©curit√© RLS activ√©e" -ForegroundColor White
Write-Host "" -ForegroundColor White

# Afficher les informations de configuration
Write-Host "üîß CONFIGURATION REQUISE POUR LE FRONTEND:" -ForegroundColor Cyan
Write-Host "   SUPABASE_URL: $SUPABASE_URL" -ForegroundColor White
Write-Host "   Tables disponibles: notarial_acts, notarial_appointments, etc." -ForegroundColor White
Write-Host "   Bucket documents: notarial-documents" -ForegroundColor White
Write-Host "" -ForegroundColor White

Write-Host "üìù PROCHAINES √âTAPES:" -ForegroundColor Yellow
Write-Host "   1. V√©rifier les variables d'environnement du frontend" -ForegroundColor White
Write-Host "   2. Tester le NotaireDashboard.jsx avec donn√©es r√©elles" -ForegroundColor White
Write-Host "   3. Ajouter la section construction √† distance dans l'admin" -ForegroundColor White
Write-Host "   4. Configurer les frais de construction √† distance" -ForegroundColor White
Write-Host "   5. Former les notaires √† l'utilisation du syst√®me" -ForegroundColor White
Write-Host "" -ForegroundColor White

# Instructions pour construction √† distance
Write-Host "üèóÔ∏è  PROCHAINE FONCTIONNALIT√â - CONSTRUCTION √Ä DISTANCE:" -ForegroundColor Magenta
Write-Host "   ‚Ä¢ Dashboard admin doit pouvoir fixer les frais de construction" -ForegroundColor White
Write-Host "   ‚Ä¢ Timeline de suivi en temps r√©el" -ForegroundColor White
Write-Host "   ‚Ä¢ Upload photos/vid√©os par les promoteurs" -ForegroundColor White
Write-Host "   ‚Ä¢ Notifications automatiques diaspora" -ForegroundColor White
Write-Host "   ‚Ä¢ Syst√®me de paiement √©chelonn√© par phases" -ForegroundColor White
Write-Host "" -ForegroundColor White

Write-Host "üèõÔ∏è Le syst√®me notaires Teranga Foncier est op√©rationnel!" -ForegroundColor Green

-- ============================================
-- FIX RAPIDE - VERSION 2 - R√îLES CORRECTS
-- ============================================
-- Ce script teste diff√©rentes valeurs de r√¥le

-- ============================================
-- 1. CR√âER LE PROFIL AVEC DIFF√âRENTS R√îLES
-- ============================================
DO $$
DECLARE
  v_email TEXT;
  v_full_name TEXT;
  v_role TEXT;
BEGIN
  -- R√©cup√©rer les infos du user depuis auth.users
  SELECT 
    email,
    COALESCE(raw_user_meta_data->>'full_name', email)
  INTO v_email, v_full_name
  FROM auth.users
  WHERE id = '3f3083ba-4f40-4045-b6e6-7f009a6c2cb2';

  IF v_email IS NULL THEN
    RAISE NOTICE '‚ùå User introuvable dans auth.users';
    RETURN;
  END IF;

  -- Essayer diff√©rents r√¥les (tester un par un si un √©choue)
  -- D√©commentez celui qui fonctionne!
  
  -- Option 1: Acheteur (essayez en premier)
  v_role := 'Acheteur';
  
  -- Option 2: Particulier (si Option 1 √©choue, commentez ligne 27 et d√©commentez celle-ci)
  -- v_role := 'Particulier';
  
  -- Option 3: acheteur (minuscule - si Options 1-2 √©chouent)
  -- v_role := 'acheteur';
  
  -- Option 4: particulier (minuscule - si Options 1-3 √©chouent)
  -- v_role := 'particulier';
  
  -- Option 5: Buyer (anglais - si Options 1-4 √©chouent)
  -- v_role := 'Buyer';

  BEGIN
    INSERT INTO public.profiles (
      id,
      email,
      role,
      full_name,
      created_at,
      updated_at
    ) VALUES (
      '3f3083ba-4f40-4045-b6e6-7f009a6c2cb2',
      v_email,
      v_role,
      v_full_name,
      NOW(),
      NOW()
    )
    ON CONFLICT (id) DO UPDATE SET
      email = EXCLUDED.email,
      role = EXCLUDED.role,
      full_name = EXCLUDED.full_name,
      updated_at = NOW();
    
    RAISE NOTICE '‚úÖ Profil cr√©√© avec r√¥le: % pour user: %', v_role, v_email;
  EXCEPTION
    WHEN check_violation THEN
      RAISE NOTICE '‚ùå R√¥le "%" refus√©. Essayez un autre r√¥le dans le script.', v_role;
      RAISE NOTICE 'Consultez la section diagnostic pour voir les r√¥les valides.';
      RAISE;
  END;
END $$;


-- ============================================
-- 2. AJOUTER COLONNE METADATA √Ä REQUESTS
-- ============================================
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
      AND table_name = 'requests' 
      AND column_name = 'metadata'
  ) THEN
    ALTER TABLE public.requests 
    ADD COLUMN metadata JSONB DEFAULT '{}'::jsonb;
    
    CREATE INDEX IF NOT EXISTS idx_requests_metadata 
    ON public.requests USING GIN (metadata);
    
    RAISE NOTICE '‚úÖ Colonne metadata ajout√©e √† requests';
  ELSE
    RAISE NOTICE '‚úì Colonne metadata existe d√©j√†';
  END IF;
  
  UPDATE public.requests 
  SET metadata = '{}'::jsonb 
  WHERE metadata IS NULL;
  
  RAISE NOTICE '‚úÖ Lignes existantes mises √† jour';
END $$;


-- ============================================
-- 3. DIAGNOSTIC - Voir les r√¥les valides
-- ============================================
-- Voir la contrainte CHECK sur role
SELECT 
  'üìã CONTRAINTE SUR ROLE:' as info,
  pg_get_constraintdef(oid) AS definition
FROM pg_constraint
WHERE conrelid = 'public.profiles'::regclass
  AND conname LIKE '%role%';

-- Voir les r√¥les actuellement utilis√©s
SELECT 
  'üìä R√îLES EXISTANTS:' as info,
  role,
  COUNT(*) as nombre_users
FROM profiles
WHERE role IS NOT NULL
GROUP BY role
ORDER BY nombre_users DESC;


-- ============================================
-- 4. V√âRIFICATIONS
-- ============================================
SELECT 
  '‚úÖ PROFIL CR√â√â:' as info,
  id, 
  email, 
  role, 
  full_name
FROM profiles 
WHERE id = '3f3083ba-4f40-4045-b6e6-7f009a6c2cb2';

SELECT 
  '‚úÖ COLONNE METADATA:' as info,
  column_name, 
  data_type,
  column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
  AND table_name = 'requests' 
  AND column_name = 'metadata';

import { ethers } from 'ethers';
import dotenv from 'dotenv';
import logger from '../utils/logger.js';

dotenv.config();

// üîó CONFIGURATION BLOCKCHAIN TERANGA FONCIER üîó
let provider;
let wallet;
let propertyContract;

// ABI Smart Contract (Simplifi√© pour d√©marrage)
const PROPERTY_CONTRACT_ABI = [
  'function registerProperty(string calldata cadastralRef, string calldata documentHash, address owner) external',
  'function verifyProperty(string calldata cadastralRef) external view returns (bool)',
  'function getProperty(string calldata cadastralRef) external view returns (string memory, address, uint256)',
  'function transferProperty(string calldata cadastralRef, address newOwner) external',
  'event PropertyRegistered(string indexed cadastralRef, address indexed owner, string documentHash)',
  'event PropertyTransferred(string indexed cadastralRef, address indexed oldOwner, address indexed newOwner)'
];

export const initBlockchain = async () => {
  try {
    // Configuration r√©seau selon environnement
    const isProduction = process.env.NODE_ENV === 'production';
    const rpcUrl = isProduction 
      ? process.env.POLYGON_RPC_URL 
      : process.env.POLYGON_TESTNET_RPC_URL || 'https://polygon-mumbai.infura.io/v3/demo';

    // Initialiser provider
    provider = new ethers.JsonRpcProvider(rpcUrl);
    
    // Test connexion
    const network = await provider.getNetwork();
    logger.info(`üîó Blockchain connect√©e: ${network.name} (ChainId: ${network.chainId})`);

    // Initialiser wallet si cl√© priv√©e fournie
    if (process.env.PRIVATE_KEY) {
      wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
      const balance = await wallet.provider.getBalance(wallet.address);
      logger.info(`üëõ Wallet: ${wallet.address}`);
      logger.info(`üí∞ Balance: ${ethers.formatEther(balance)} ${isProduction ? 'MATIC' : 'Test MATIC'}`);
    }

    // Initialiser contrat si adresse fournie
    if (process.env.CONTRACT_ADDRESS && wallet) {
      propertyContract = new ethers.Contract(
        process.env.CONTRACT_ADDRESS,
        PROPERTY_CONTRACT_ABI,
        wallet
      );
      logger.info(`üìÑ Smart Contract: ${process.env.CONTRACT_ADDRESS}`);
    }

    logger.info('‚úÖ Blockchain initialis√©e - Teranga Foncier Ready');
    return { provider, wallet, propertyContract };
    
  } catch (error) {
    logger.error('‚ùå Erreur initialisation blockchain:', error);
    // Ne pas faire planter l'app si blockchain non disponible
    return { provider: null, wallet: null, propertyContract: null };
  }
};

// üè† FONCTIONS BLOCKCHAIN TERANGA FONCIER
export const registerPropertyOnBlockchain = async (cadastralRef, documentHash, ownerAddress) => {
  try {
    if (!propertyContract) {
      throw new Error('Smart contract non initialis√©');
    }

    logger.info(`üîó Enregistrement propri√©t√© blockchain: ${cadastralRef}`);
    
    const tx = await propertyContract.registerProperty(
      cadastralRef,
      documentHash,
      ownerAddress
    );
    
    logger.info(`‚è≥ Transaction envoy√©e: ${tx.hash}`);
    
    const receipt = await tx.wait();
    logger.info(`‚úÖ Propri√©t√© enregistr√©e sur blockchain: ${receipt.transactionHash}`);
    
    return {
      success: true,
      txHash: receipt.transactionHash,
      blockNumber: receipt.blockNumber,
      gasUsed: receipt.gasUsed.toString()
    };
    
  } catch (error) {
    logger.error('‚ùå Erreur enregistrement blockchain:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

export const verifyPropertyOnBlockchain = async (cadastralRef) => {
  try {
    if (!propertyContract) {
      return { verified: false, error: 'Smart contract non disponible' };
    }

    const isVerified = await propertyContract.verifyProperty(cadastralRef);
    const propertyData = await propertyContract.getProperty(cadastralRef);
    
    return {
      verified: isVerified,
      documentHash: propertyData[0],
      owner: propertyData[1],
      timestamp: propertyData[2]
    };
    
  } catch (error) {
    logger.error('‚ùå Erreur v√©rification blockchain:', error);
    return {
      verified: false,
      error: error.message
    };
  }
};

export const transferPropertyOnBlockchain = async (cadastralRef, newOwnerAddress) => {
  try {
    if (!propertyContract) {
      throw new Error('Smart contract non initialis√©');
    }

    const tx = await propertyContract.transferProperty(cadastralRef, newOwnerAddress);
    const receipt = await tx.wait();
    
    logger.info(`‚úÖ Propri√©t√© transf√©r√©e: ${receipt.transactionHash}`);
    
    return {
      success: true,
      txHash: receipt.transactionHash,
      newOwner: newOwnerAddress
    };
    
  } catch (error) {
    logger.error('‚ùå Erreur transfert blockchain:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

export { provider, wallet, propertyContract };
#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://ndenqikcogzrkrjnlvns.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5kZW5xaWtjb2d6cmtyam5sdm5zIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjY2MzMwNCwiZXhwIjoyMDcyMjM5MzA0fQ._mFhSg4VDhnUE8ctKLEHpYkafpBqsbnZCzvX9JwtP0c';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function diagnoseProfileIssue() {
  console.log('üîç DIAGNOSTIC COMPLET - Probl√®me de profil vendeur\n');
  console.log('='.repeat(60) + '\n');

  try {
    // 1Ô∏è‚É£ V√©rifier les propri√©t√©s
    console.log('üìã 1. R√©cup√©ration des propri√©t√©s actives...');
    const { data: properties, error: propertiesError } = await supabase
      .from('properties')
      .select('id, title, owner_id, status, verification_status, created_at')
      .eq('status', 'active')
      .eq('verification_status', 'verified')
      .order('created_at', { ascending: false })
      .limit(10);

    if (propertiesError) {
      console.error('‚ùå Erreur propri√©t√©s:', propertiesError.message);
      return;
    }

    console.log(`‚úÖ ${properties.length} propri√©t√©(s) trouv√©e(s)\n`);
    properties.forEach((p, i) => {
      console.log(`   [${i + 1}] ${p.title}`);
      console.log(`       ID: ${p.id}`);
      console.log(`       Owner ID: ${p.owner_id}`);
    });

    // 2Ô∏è‚É£ R√©cup√©rer les IDs des propri√©taires
    const ownerIds = [...new Set(properties.map(p => p.owner_id).filter(Boolean))];
    console.log(`\nüîë ${ownerIds.length} propri√©taire(s) unique(s) identifi√©(s):`);
    ownerIds.forEach(id => console.log(`   - ${id}`));

    // 3Ô∏è‚É£ V√©rifier si les profils existent
    console.log('\nüë§ 2. Recherche des profils correspondants...');
    if (ownerIds.length > 0) {
      const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('id, full_name, email, role, created_at')
        .in('id', ownerIds);

      if (profilesError) {
        console.error('‚ùå Erreur profils:', profilesError.message);
        return;
      }

      console.log(`‚úÖ ${profiles.length} profil(s) trouv√©(s)\n`);
      profiles.forEach((p, i) => {
        console.log(`   [${i + 1}] ${p.full_name}`);
        console.log(`       ID: ${p.id}`);
        console.log(`       Email: ${p.email}`);
        console.log(`       R√¥le: ${p.role}`);
      });

      // 4Ô∏è‚É£ Identifier les propri√©taires manquants
      console.log('\n‚ö†Ô∏è  3. Analyse: Propri√©taires manquants...');
      const profileIds = profiles.map(p => p.id);
      const missingIds = ownerIds.filter(id => !profileIds.includes(id));
      
      if (missingIds.length > 0) {
        console.log(`‚ùå ${missingIds.length} propri√©taire(s) MANQUANT(S) dans la table profiles:`);
        missingIds.forEach(id => {
          const prop = properties.find(p => p.owner_id === id);
          console.log(`   - ${id} (li√© √†: "${prop.title}")`);
        });
      } else {
        console.log('‚úÖ Tous les propri√©taires existent dans la table profiles');
      }

      // 5Ô∏è‚É£ Tester une requ√™te directe de profil
      if (ownerIds.length > 0) {
        console.log('\nüß™ 4. Test de requ√™te directe de profil...');
        const testId = ownerIds[0];
        const testProperty = properties.find(p => p.owner_id === testId);
        console.log(`   Test avec: ${testProperty.title} (owner_id: ${testId})\n`);
        
        const { data: singleProfile, error: singleError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', testId)
          .single();

        if (singleError) {
          console.error(`   ‚ùå Erreur requ√™te: ${singleError.message}`);
        } else {
          console.log('   ‚úÖ Profil r√©cup√©r√© avec succ√®s:');
          console.log(`       Nom: ${singleProfile.full_name}`);
          console.log(`       Email: ${singleProfile.email}`);
          console.log(`       T√©l√©phone: ${singleProfile.phone || 'N/A'}`);
          console.log(`       Bio: ${singleProfile.bio || 'N/A'}`);
          console.log(`       R√¥le: ${singleProfile.role}`);
        }
      }

      // 6Ô∏è‚É£ V√©rifier les r√®gles RLS
      console.log('\nüîê 5. V√©rification des permissions RLS...');
      console.log('   Service role utilis√© = acc√®s complet aux donn√©es');
      console.log('   ‚úÖ Les requ√™tes en lecture devraient fonctionner');

    } else {
      console.log('‚ö†Ô∏è  Aucune propri√©t√© active trouv√©e pour le diagnostic');
    }

    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ Diagnostic termin√©\n');

  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale:', error.message);
    console.error(error);
  }
}

diagnoseProfileIssue();

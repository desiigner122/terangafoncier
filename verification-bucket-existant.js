// Test de v√©rification du bucket avatars existant
import { supabase } from './src/lib/customSupabaseClient.js';

console.log('üîç V√âRIFICATION BUCKET AVATARS EXISTANT');
console.log('=====================================');

async function checkExistingBucket() {
    try {
        console.log('\nüìÅ 1. V√âRIFICATION BUCKETS DISPONIBLES:');
        
        // Lister tous les buckets
        const { data: buckets, error: listError } = await supabase.storage.listBuckets();
        
        if (listError) {
            console.log('‚ùå Erreur listage buckets:', listError.message);
            return false;
        }
        
        console.log(`‚úÖ Buckets trouv√©s: ${buckets.length}`);
        buckets.forEach(bucket => {
            console.log(`   - ${bucket.name}: public=${bucket.public}, taille_max=${bucket.file_size_limit}`);
        });
        
        // Chercher sp√©cifiquement le bucket avatars
        const avatarsBucket = buckets.find(bucket => bucket.name === 'avatars');
        
        if (avatarsBucket) {
            console.log('\n‚úÖ BUCKET AVATARS TROUV√â:');
            console.log(`   - Nom: ${avatarsBucket.name}`);
            console.log(`   - Public: ${avatarsBucket.public}`);
            console.log(`   - Taille max: ${avatarsBucket.file_size_limit} bytes (${Math.round(avatarsBucket.file_size_limit/1024/1024)}MB)`);
            console.log(`   - Types autoris√©s: ${avatarsBucket.allowed_mime_types || 'Non sp√©cifi√©'}`);
            
            return true;
        } else {
            console.log('\n‚ùå BUCKET AVATARS NON TROUV√â');
            return false;
        }
        
    } catch (error) {
        console.log('‚ùå Erreur g√©n√©rale:', error.message);
        return false;
    }
}

async function testUploadCapability() {
    console.log('\nüß™ 2. TEST CAPACIT√â UPLOAD:');
    
    try {
        // Cr√©er un fichier test tr√®s simple
        const testContent = 'test avatar upload';
        const testFile = new Blob([testContent], { type: 'text/plain' });
        
        // Tenter un upload test
        const testPath = `test-${Date.now()}.txt`;
        
        const { data: uploadData, error: uploadError } = await supabase.storage
            .from('avatars')
            .upload(testPath, testFile, {
                cacheControl: '3600',
                upsert: false
            });
            
        if (uploadError) {
            console.log('‚ö†Ô∏è Upload test √©chou√© (normal si RLS strict):', uploadError.message);
            console.log('   Cela peut √™tre d√ª aux politiques de s√©curit√© RLS');
        } else {
            console.log('‚úÖ Upload test r√©ussi:', uploadData.path);
            
            // Nettoyer le fichier test
            await supabase.storage.from('avatars').remove([testPath]);
            console.log('üßπ Fichier test supprim√©');
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è Test upload √©chou√©:', error.message);
    }
}

async function checkPolicies() {
    console.log('\nüîí 3. V√âRIFICATION POLITIQUES:');
    
    try {
        // Tenter de r√©cup√©rer des infos sur le bucket (test indirect des politiques)
        const { data: bucketInfo, error } = await supabase.storage.getBucket('avatars');
        
        if (error) {
            console.log('‚ö†Ô∏è Erreur acc√®s bucket info:', error.message);
        } else {
            console.log('‚úÖ Acc√®s aux informations bucket OK');
            console.log('   Les politiques semblent configur√©es');
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è Test politiques √©chou√©:', error.message);
    }
}

async function runVerification() {
    const bucketExists = await checkExistingBucket();
    
    if (bucketExists) {
        await testUploadCapability();
        await checkPolicies();
        
        console.log('\nüéØ R√âSULTAT V√âRIFICATION:');
        console.log('‚úÖ Bucket avatars: EXISTE et configur√©');
        console.log('‚úÖ Le probl√®me "Bucket avatars non disponible" devrait √™tre r√©solu');
        
        console.log('\nüß™ TEST DANS L\'APPLICATION:');
        console.log('1. Ouvrez http://localhost:5174/');
        console.log('2. Allez dans Profil ou cr√©ation d\'utilisateur');
        console.log('3. Essayez d\'uploader une photo');
        console.log('4. L\'erreur ne devrait plus appara√Ætre');
        
        console.log('\n‚úÖ BUCKET AVATARS OP√âRATIONNEL !');
        
    } else {
        console.log('\n‚ùå PROBL√àME: Bucket avatars introuvable');
        console.log('V√©rifiez la connexion Supabase ou les permissions');
    }
}

runVerification();

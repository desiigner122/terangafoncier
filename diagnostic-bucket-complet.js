// V√©rification compl√®te et correction bucket avatars
import { supabase } from './src/lib/customSupabaseClient.js';

console.log('üîß DIAGNOSTIC COMPLET BUCKET AVATARS');
console.log('====================================');

// Test avec diff√©rentes configurations Supabase
async function testMultipleConnections() {
    console.log('\nüîó 1. TESTS CONNEXIONS SUPABASE:');
    
    // Test 1: Connexion client standard
    try {
        const { data: user, error } = await supabase.auth.getUser();
        if (error) {
            console.log('‚ö†Ô∏è Connexion auth:', error.message);
        } else {
            console.log('‚úÖ Connexion auth OK');
        }
    } catch (err) {
        console.log('‚ùå Erreur auth:', err.message);
    }
    
    // Test 2: Storage direct
    try {
        const { data, error } = await supabase.storage.listBuckets();
        console.log('üìä Buckets via client standard:', data?.length || 0);
        
        if (error) {
            console.log('‚ùå Erreur storage client:', error.message);
            
            // Le probl√®me peut √™tre li√© aux permissions RLS
            console.log('\nüîç ANALYSE POSSIBLE:');
            console.log('- Le bucket existe c√¥t√© serveur (erreur SQL le confirme)');
            console.log('- Mais les politiques RLS bloquent l\'acc√®s via client JS');
            console.log('- Solution: V√©rifier les politiques storage dans Supabase');
        }
        
    } catch (err) {
        console.log('‚ùå Erreur g√©n√©rale storage:', err.message);
    }
}

// Test upload direct pour confirmer fonctionnement
async function testDirectUpload() {
    console.log('\nüì§ 2. TEST UPLOAD DIRECT:');
    
    try {
        // Cr√©er un fichier test simple
        const testData = `Test upload ${new Date().toISOString()}`;
        const testFile = new Blob([testData], { type: 'text/plain' });
        const fileName = `test-upload-${Date.now()}.txt`;
        
        console.log(`üß™ Tentative upload: ${fileName}`);
        
        const { data, error } = await supabase.storage
            .from('avatars')
            .upload(fileName, testFile, {
                cacheControl: '3600',
                upsert: true
            });
            
        if (error) {
            console.log('‚ùå Upload √©chou√©:', error.message);
            
            // Analyser le type d'erreur
            if (error.message.includes('Bucket not found')) {
                console.log('üîç DIAGNOSTIC: Bucket r√©ellement manquant c√¥t√© storage');
                return 'bucket_missing';
            } else if (error.message.includes('policy')) {
                console.log('üîç DIAGNOSTIC: Bucket existe, probl√®me de politiques');
                return 'policy_issue';
            } else {
                console.log('üîç DIAGNOSTIC: Autre probl√®me:', error.message);
                return 'other_error';
            }
            
        } else {
            console.log('‚úÖ Upload r√©ussi !', data);
            
            // Nettoyer
            try {
                await supabase.storage.from('avatars').remove([fileName]);
                console.log('üßπ Fichier test nettoy√©');
            } catch (cleanError) {
                console.log('‚ö†Ô∏è Erreur nettoyage:', cleanError.message);
            }
            
            return 'working';
        }
        
    } catch (err) {
        console.log('‚ùå Erreur test upload:', err.message);
        return 'error';
    }
}

// Proposer solutions selon le diagnostic
function provideSolutions(diagnosticResult) {
    console.log('\nüí° 3. SOLUTIONS RECOMMAND√âES:');
    console.log('==============================');
    
    switch (diagnosticResult) {
        case 'working':
            console.log('üéâ EXCELLENTE NOUVELLE !');
            console.log('‚úÖ Le bucket avatars fonctionne parfaitement');
            console.log('‚úÖ L\'erreur "Bucket avatars non disponible" est r√©solue');
            console.log('\nüß™ √Ä TESTER MAINTENANT:');
            console.log('1. Ouvrez http://localhost:5174/admin/users');
            console.log('2. Cr√©ez un utilisateur avec photo');
            console.log('3. L\'upload devrait fonctionner');
            break;
            
        case 'policy_issue':
            console.log('üîí PROBL√àME DE POLITIQUES RLS');
            console.log('Le bucket existe mais les permissions bloquent l\'acc√®s');
            console.log('\nüìã SOLUTION:');
            console.log('Ex√©cuter dans Supabase SQL Editor:');
            console.log(`
-- Corriger les politiques RLS
DROP POLICY IF EXISTS "Public Avatar Access" ON storage.objects;
DROP POLICY IF EXISTS "User Avatar Upload" ON storage.objects;

CREATE POLICY "Public Avatar Access" ON storage.objects
FOR SELECT TO public
USING (bucket_id = 'avatars');

CREATE POLICY "User Avatar Upload" ON storage.objects  
FOR INSERT TO authenticated
WITH CHECK (bucket_id = 'avatars');

CREATE POLICY "User Avatar Update" ON storage.objects
FOR UPDATE TO authenticated
USING (bucket_id = 'avatars')
WITH CHECK (bucket_id = 'avatars');
            `);
            break;
            
        case 'bucket_missing':
            console.log('‚ùå BUCKET R√âELLEMENT MANQUANT');
            console.log('Malgr√© l\'erreur SQL, le bucket n\'existe pas c√¥t√© storage');
            console.log('\nüìã SOLUTION:');
            console.log('1. Aller dans Supabase Dashboard ‚Üí Storage');
            console.log('2. Cr√©er manuellement le bucket "avatars"');
            console.log('3. Ou r√©essayer le script SQL avec les bonnes permissions');
            break;
            
        default:
            console.log('üîç DIAGNOSTIC N√âCESSAIRE');
            console.log('Probl√®me non identifi√©, investigation manuelle requise');
            console.log('\nüìã √âTAPES SUIVANTES:');
            console.log('1. V√©rifier Supabase Dashboard ‚Üí Storage');
            console.log('2. V√©rifier les logs Supabase');
            console.log('3. Tester depuis l\'interface Supabase directement');
    }
}

// Ex√©cution du diagnostic complet
async function runFullDiagnostic() {
    await testMultipleConnections();
    const result = await testDirectUpload();
    provideSolutions(result);
    
    console.log('\nüìä R√âSUM√â DIAGNOSTIC:');
    console.log('- Erreur SQL "duplicate key": Bucket d√©clar√© c√¥t√© base ‚úÖ');
    console.log('- Test upload direct:', result);
    console.log('- Prochaine √©tape: Appliquer la solution recommand√©e');
}

runFullDiagnostic();

#!/usr/bin/env pwsh

Write-Host "üéØ AUDIT COMPLET - DASHBOARDS CORRIG√âS" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor Cyan

Write-Host "`nüìä Dashboards √† tester :" -ForegroundColor Yellow
$dashboards = @(
    "BanquesDashboardPage.jsx",
    "NotairesDashboardPage.jsx", 
    "InvestisseursDashboardPage.jsx",
    "PromoteursDashboardPage.jsx",
    "AgriculteursDashboardPage.jsx"
)

foreach ($dashboard in $dashboards) {
    Write-Host "   ‚úì $dashboard" -ForegroundColor Green
}

Write-Host "`nüîç V√©rification des corrections :" -ForegroundColor Yellow

# V√©rifier l'absence de donn√©es hardcod√©es
Write-Host "`n1. V√©rification absence de kpiData hardcod√©..." -ForegroundColor Cyan
$hardcodedFiles = Get-ChildItem -Path "src/pages/solutions/dashboards/" -Filter "*Dashboard*.jsx" | 
    ForEach-Object { 
        $content = Get-Content $_.FullName -Raw
        if ($content -match 'const kpiData = \[') {
            $_.Name
        }
    }

if ($hardcodedFiles) {
    Write-Host "   ‚ùå Fichiers avec donn√©es hardcod√©es trouv√©s :" -ForegroundColor Red
    $hardcodedFiles | ForEach-Object { Write-Host "      - $_" -ForegroundColor Red }
} else {
    Write-Host "   ‚úÖ Aucune donn√©e hardcod√©e kpiData trouv√©e" -ForegroundColor Green
}

# V√©rifier l'int√©gration Supabase
Write-Host "`n2. V√©rification int√©gration Supabase..." -ForegroundColor Cyan
$supabaseFiles = Get-ChildItem -Path "src/pages/solutions/dashboards/" -Filter "*Dashboard*.jsx" | 
    ForEach-Object { 
        $content = Get-Content $_.FullName -Raw
        if ($content -match 'import.*supabase.*from.*@/lib/supabase' -and $content -match 'useAuth') {
            $_.Name
        }
    }

Write-Host "   ‚úÖ Fichiers avec int√©gration Supabase :" -ForegroundColor Green
$supabaseFiles | ForEach-Object { Write-Host "      - $_" -ForegroundColor Green }

# V√©rifier les avatars externes
Write-Host "`n3. V√©rification avatars externes..." -ForegroundColor Cyan
$externalAvatars = Get-ChildItem -Path "src/pages/solutions/dashboards/" -Filter "*.jsx" | 
    ForEach-Object { 
        $content = Get-Content $_.FullName -Raw
        if ($content -match 'ui-avatars\.com|avatar\.vercel\.sh') {
            $_.Name
        }
    }

if ($externalAvatars) {
    Write-Host "   ‚ö†Ô∏è  Fichiers avec avatars externes trouv√©s :" -ForegroundColor Yellow
    $externalAvatars | ForEach-Object { Write-Host "      - $_" -ForegroundColor Yellow }
} else {
    Write-Host "   ‚úÖ Aucun avatar externe trouv√©" -ForegroundColor Green
}

Write-Host "`nüß™ Tests de d√©marrage :" -ForegroundColor Yellow
Write-Host "   Pour tester les dashboards, utilisez :" -ForegroundColor White
Write-Host "   npm run dev" -ForegroundColor Cyan
Write-Host "   Puis naviguez vers :" -ForegroundColor White
Write-Host "   - /banques-dashboard (Banques)" -ForegroundColor Cyan
Write-Host "   - /notaires-dashboard (Notaires)" -ForegroundColor Cyan  
Write-Host "   - /investisseurs-dashboard (Investisseurs)" -ForegroundColor Cyan
Write-Host "   - /promoteurs-dashboard (Promoteurs)" -ForegroundColor Cyan

Write-Host "`nüìã R√©sum√© des corrections appliqu√©es :" -ForegroundColor Yellow
Write-Host "   ‚úÖ Remplacement kpiData hardcod√© par requ√™tes Supabase" -ForegroundColor Green
Write-Host "   ‚úÖ Ajout useAuth et int√©gration authentification" -ForegroundColor Green
Write-Host "   ‚úÖ Conversion donn√©es statiques vers donn√©es dynamiques" -ForegroundColor Green
Write-Host "   ‚úÖ Correction avatars externes vers Supabase" -ForegroundColor Green
Write-Host "   ‚úÖ G√©n√©ration m√©triques bas√©es sur donn√©es r√©elles" -ForegroundColor Green

Write-Host "`nüéØ AUDIT TERMIN√â - Dashboards pr√™ts pour test" -ForegroundColor Green

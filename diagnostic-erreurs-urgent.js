// ====================================
// DIAGNOSTIC URGENT DES ERREURS SYSTEME
// ====================================

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://ndenqikcogzrkrjnlvns.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5kZW5xaWtjb2d6cmtyam5sdm5zIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjU0NjczNzMsImV4cCI6MjA0MTA0MzM3M30.2vhWWOIJ9rD9gg2WNGsUOSBqG7R5NQHZL0F5W5WKYMU'

const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üîç DIAGNOSTIC URGENT - Teranga Foncier')
console.log('=====================================')

// 1. Test de la table users et ses colonnes
async function checkUsersTable() {
    console.log('\nüìä 1. VERIFICATION TABLE USERS:')
    
    try {
        // Test des colonnes essentielles
        const { data, error } = await supabase
            .from('users')
            .select('id, email, phone, full_name, role, status, verification_status, avatar_url')
            .limit(1)
        
        if (error) {
            console.log('‚ùå ERREUR TABLE USERS:', error.message)
            if (error.code === 'PGRST204') {
                console.log('üö® COLONNES MANQUANTES DETECTEES!')
                console.log('   - Ex√©cutez SCRIPT_CORRIGE_FINAL.sql dans Supabase')
            }
        } else {
            console.log('‚úÖ Table users accessible')
            console.log('‚úÖ Colonnes disponibles:', Object.keys(data[0] || {}))
        }
    } catch (err) {
        console.log('‚ùå ERREUR CRITIQUE TABLE USERS:', err.message)
    }
}

// 2. Test du bucket avatars
async function checkAvatarsBucket() {
    console.log('\nüìÅ 2. VERIFICATION BUCKET AVATARS:')
    
    try {
        const { data, error } = await supabase.storage.listBuckets()
        
        if (error) {
            console.log('‚ùå ERREUR STORAGE:', error.message)
        } else {
            const avatarsBucket = data.find(bucket => bucket.name === 'avatars')
            if (avatarsBucket) {
                console.log('‚úÖ Bucket avatars existe')
                console.log('‚úÖ Public:', avatarsBucket.public)
            } else {
                console.log('‚ùå BUCKET AVATARS MANQUANT!')
                console.log('üö® Ex√©cutez SCRIPT_CORRIGE_FINAL.sql pour le cr√©er')
            }
        }
    } catch (err) {
        console.log('‚ùå ERREUR CRITIQUE STORAGE:', err.message)
    }
}

// 3. Test des politiques RLS
async function checkRLSPolicies() {
    console.log('\nüõ°Ô∏è 3. VERIFICATION POLITIQUES RLS:')
    
    try {
        // Test d'acc√®s aux analytics
        const { data, error } = await supabase
            .from('analytics_events')
            .select('*')
            .limit(1)
        
        if (error && error.code === '42P01') {
            console.log('‚ùå TABLE ANALYTICS_EVENTS MANQUANTE!')
            console.log('üö® Ex√©cutez SCRIPT_CORRIGE_FINAL.sql')
        } else if (error) {
            console.log('‚ö†Ô∏è Erreur RLS analytics:', error.message)
        } else {
            console.log('‚úÖ Table analytics_events accessible')
        }
    } catch (err) {
        console.log('‚ùå ERREUR RLS:', err.message)
    }
}

// 4. Test de cr√©ation d'utilisateur
async function testUserCreation() {
    console.log('\nüë§ 4. TEST CREATION UTILISATEUR:')
    
    try {
        // Simuler les donn√©es du wizard
        const testUserData = {
            email: 'test@terangafoncier.com',
            phone: '+221771234567',
            full_name: 'Test Utilisateur',
            role: 'Vendeur Particulier',
            country: 'Senegal',
            region: 'Dakar',
            status: 'active',
            verification_status: 'pending'
        }
        
        console.log('üß™ Test avec donn√©es:', testUserData)
        
        // Test d'insertion (sans vraiment ins√©rer)
        const { error } = await supabase
            .from('users')
            .select('*')
            .eq('email', testUserData.email)
        
        if (error) {
            console.log('‚ùå ERREUR TEST UTILISATEUR:', error.message)
            if (error.code === 'PGRST204') {
                console.log('üö® SCHEMA NON SYNCHRONISE - Ex√©cutez le script SQL!')
            }
        } else {
            console.log('‚úÖ Structure utilisateur OK')
        }
        
    } catch (err) {
        console.log('‚ùå ERREUR TEST:', err.message)
    }
}

// 5. R√©sum√© et solutions
function printSolutions() {
    console.log('\nüîß SOLUTIONS URGENTES:')
    console.log('========================')
    console.log('')
    console.log('1. üéØ EXECUTER LE SCRIPT SQL:')
    console.log('   - Ouvrez https://app.supabase.com')
    console.log('   - Projet > SQL Editor > Nouvelle requ√™te')
    console.log('   - Copiez SCRIPT_CORRIGE_FINAL.sql')
    console.log('   - Cliquez RUN')
    console.log('')
    console.log('2. üîÑ VIDER LE CACHE:')
    console.log('   - F12 > Application > Storage > Clear site data')
    console.log('   - Rechargez la page')
    console.log('')
    console.log('3. üß™ TESTER LE WIZARD:')
    console.log('   - Cr√©ez un utilisateur test')
    console.log('   - V√©rifiez l\'upload d\'avatar')
    console.log('')
    console.log('4. üìä VERIFIER LES DASHBOARDS:')
    console.log('   - Testez les actions utilisateur')
    console.log('   - V√©rifiez les analytics')
}

// Ex√©cution du diagnostic
async function runDiagnostic() {
    try {
        await checkUsersTable()
        await checkAvatarsBucket()
        await checkRLSPolicies()
        await testUserCreation()
        printSolutions()
        
        console.log('\n‚úÖ DIAGNOSTIC TERMINE')
        console.log('Ex√©cutez SCRIPT_CORRIGE_FINAL.sql pour corriger tous les probl√®mes!')
        
    } catch (error) {
        console.log('\n‚ùå ERREUR CRITIQUE DIAGNOSTIC:', error.message)
    }
}

runDiagnostic()

#!/usr/bin/env node

/**
 * V√©rifier que la migration Seller Ratings a √©t√© appliqu√©e correctement
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('Assurez-vous d\'avoir VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY dans .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç V√©rification de la migration Seller Ratings...\n');

try {
  // V√©rifier les colonnes dans la table profiles
  console.log('üìä V√©rification de la table profiles...');
  const { data: profileColumns, error: profileError } = await supabase
    .from('profiles')
    .select('id, rating, review_count, properties_sold')
    .limit(1);
  
  if (profileError && profileError.message.includes('column')) {
    console.error('‚ùå Les colonnes n\'existent pas encore');
    console.error('   Erreur:', profileError.message);
  } else if (profileColumns) {
    console.log('‚úÖ Colonnes trouv√©es dans profiles:');
    console.log('   - rating');
    console.log('   - review_count');
    console.log('   - properties_sold');
  }
  
  // V√©rifier la table reviews
  console.log('\nüìã V√©rification de la table reviews...');
  const { data: reviews, error: reviewError } = await supabase
    .from('reviews')
    .select('*')
    .limit(1);
  
  if (reviewError && reviewError.message.includes('does not exist')) {
    console.error('‚ùå La table reviews n\'existe pas');
  } else {
    console.log('‚úÖ Table reviews existe');
    console.log(`   Nombre de reviews: ${reviews?.length || 0}`);
  }
  
  // V√©rifier les statistiques
  console.log('\nüìà Statistiques:');
  const { count: profileCount } = await supabase
    .from('profiles')
    .select('*', { count: 'exact', head: true });
  
  console.log(`   ‚úÖ ${profileCount} profils dans la base`);
  
  const { data: sellers } = await supabase
    .from('profiles')
    .select('id, rating, review_count, properties_sold')
    .gt('properties_sold', 0)
    .limit(5);
  
  if (sellers && sellers.length > 0) {
    console.log(`   ‚úÖ ${sellers.length} vendeurs avec propri√©t√©s vendues:`);
    sellers.forEach((seller, index) => {
      console.log(`      ${index + 1}. Rating: ${seller.rating}, Vendues: ${seller.properties_sold}, Reviews: ${seller.review_count}`);
    });
  } else {
    console.log('   ‚ÑπÔ∏è  Aucun vendeur avec propri√©t√©s vendues pour l\'instant');
  }
  
  console.log('\n‚úÖ Migration v√©rifi√©e avec succ√®s!\n');
  console.log('üéØ Prochaines √©tapes:');
  console.log('   1. Tester la page d√©tail parcel - v√©rifier l\'incr√©mentation des vues');
  console.log('   2. Tester le bouton favoris - v√©rifier la mise √† jour du compteur');
  console.log('   3. V√©rifier que les ratings s\'affichent correctement');
  
} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification:');
  console.error(error.message);
  process.exit(1);
}

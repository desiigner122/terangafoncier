#!/usr/bin/env node

/**
 * üßπ Nettoyage Base de Donn√©es Supabase
 * Supprime tous les comptes de test et donn√©es simul√©es
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üßπ Nettoyage Base de Donn√©es Supabase');
console.log('='.repeat(50));

async function cleanDatabase() {
  try {
    console.log('üîç V√©rification des donn√©es existantes...');
    
    // Compter les donn√©es avant nettoyage
    const { data: profiles } = await supabase.from('profiles').select('*', { count: 'exact', head: true });
    const { data: properties } = await supabase.from('properties').select('*', { count: 'exact', head: true });
    const { data: annonces } = await supabase.from('annonces').select('*', { count: 'exact', head: true });
    
    console.log('üìä Donn√©es actuelles:');
    console.log(`   ‚Ä¢ Profils: ${profiles || 0}`);
    console.log(`   ‚Ä¢ Propri√©t√©s: ${properties || 0}`);
    console.log(`   ‚Ä¢ Annonces: ${annonces || 0}`);
    
    if (profiles === 0 && properties === 0 && annonces === 0) {
      console.log('‚úÖ Base de donn√©es d√©j√† propre!');
      return;
    }
    
    console.log('\\nüóëÔ∏è Suppression des donn√©es de test...');
    
    // Supprimer les profils avec emails de test
    const { error: profilesError } = await supabase
      .from('profiles')
      .delete()
      .or('email.like.*test*,email.like.*demo*,email.like.*@terangafoncier.com,email.like.*simulation*');
    
    if (profilesError) {
      console.log('‚ö†Ô∏è Erreur suppression profils:', profilesError.message);
    } else {
      console.log('‚úÖ Profils de test supprim√©s');
    }
    
    // Supprimer les propri√©t√©s de test
    const { error: propertiesError } = await supabase
      .from('properties')
      .delete()
      .or('title.like.*test*,title.like.*demo*,description.like.*test*');
    
    if (propertiesError) {
      console.log('‚ö†Ô∏è Erreur suppression propri√©t√©s:', propertiesError.message);
    } else {
      console.log('‚úÖ Propri√©t√©s de test supprim√©es');
    }
    
    // Supprimer les annonces de test
    const { error: annoncesError } = await supabase
      .from('annonces')
      .delete()
      .or('title.like.*test*,title.like.*demo*,description.like.*simulation*');
    
    if (annoncesError) {
      console.log('‚ö†Ô∏è Erreur suppression annonces:', annoncesError.message);
    } else {
      console.log('‚úÖ Annonces de test supprim√©es');
    }
    
    console.log('\\nüìä V√©rification apr√®s nettoyage...');
    
    // Recompter
    const { data: newProfiles } = await supabase.from('profiles').select('*', { count: 'exact', head: true });
    const { data: newProperties } = await supabase.from('properties').select('*', { count: 'exact', head: true });
    const { data: newAnnonces } = await supabase.from('annonces').select('*', { count: 'exact', head: true });
    
    console.log('üìä Donn√©es apr√®s nettoyage:');
    console.log(`   ‚Ä¢ Profils: ${newProfiles || 0}`);
    console.log(`   ‚Ä¢ Propri√©t√©s: ${newProperties || 0}`);
    console.log(`   ‚Ä¢ Annonces: ${newAnnonces || 0}`);
    
    console.log('\\nüéâ Nettoyage termin√©!');
    console.log('‚úÖ Base de donn√©es pr√™te pour vrais utilisateurs');
    
  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error.message);
  }
}

cleanDatabase();
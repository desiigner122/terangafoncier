// Service principal pour l'int√©gration OpenAI GPT-4
import axios from 'axios';
import { ENV_VARS, logEnvStatus } from '../../utils/env';

class OpenAIService {
  constructor() {
    // Utilisation de l'utilitaire s√©curis√© pour les variables d'environnement
    this.apiKey = ENV_VARS.OPENAI_API_KEY;
    this.baseURL = 'https://api.openai.com/v1';
    this.model = 'gpt-4-turbo-preview';
    
    // Mode simulation activ√© par d√©faut pour le d√©veloppement
    this.simulationMode = true;
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è OpenAI API Key non configur√©e. Utilisation du mode simulation.');
      console.info('üìù Pour activer l\'IA: Ajoutez votre cl√© OpenAI dans les param√®tres syst√®me ou dans .env');
    } else {
      console.info('‚úÖ Cl√© API OpenAI d√©tect√©e');
      this.simulationMode = false;
    }
    
    // Logger le statut des variables d'environnement en d√©veloppement
    if (ENV_VARS.NODE_ENV === 'development') {
      logEnvStatus();
    }
  }

  // M√©thode pour configurer la cl√© API dynamiquement depuis les param√®tres
  setApiKey(apiKey) {
    this.apiKey = apiKey;
    this.simulationMode = !apiKey;
    if (apiKey) {
      console.info('‚úÖ Cl√© API OpenAI configur√©e avec succ√®s');
    }
  }

  async makeRequest(endpoint, data) {
    if (this.simulationMode) {
      return this.getSimulatedResponse(endpoint, data);
    }

    try {
      const response = await axios.post(`${this.baseURL}${endpoint}`, data, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      return response.data;
    } catch (error) {
      console.error('Erreur OpenAI:', error);
      return this.getSimulatedResponse(endpoint, data);
    }
  }

  // Analyse d'une propri√©t√© avec IA
  async analyzeProperty(propertyData) {
    const prompt = `
    Analysez cette propri√©t√© immobili√®re et fournissez une √©valuation d√©taill√©e:
    
    Titre: ${propertyData.title}
    Localisation: ${propertyData.location}
    Prix: ${propertyData.price}
    Surface: ${propertyData.surface}
    Type: ${propertyData.type}
    Description: ${propertyData.description}
    
    Fournissez:
    1. Score d'attractivit√© (0-100)
    2. Estimation prix march√©
    3. Points forts et faibles
    4. Recommandations d'am√©lioration
    5. Potentiel d'investissement
    
    R√©pondez en JSON structur√©.
    `;

    const response = await this.makeRequest('/chat/completions', {
      model: this.model,
      messages: [{
        role: 'system',
        content: 'Vous √™tes un expert immobilier IA sp√©cialis√© dans l\'√©valuation de propri√©t√©s au S√©n√©gal.'
      }, {
        role: 'user',
        content: prompt
      }],
      max_tokens: 1500,
      temperature: 0.3
    });

    return this.parsePropertyAnalysis(response);
  }

  // Pr√©dictions march√© immobilier
  async getPredictMarketTrends(location, timeframe = '6months') {
    const prompt = `
    Analysez les tendances du march√© immobilier pour ${location} sur ${timeframe}.
    
    Fournissez des pr√©dictions sur:
    1. √âvolution des prix (+/- %)
    2. Demande par type de bien
    3. Quartiers en croissance
    4. Facteurs d'influence
    5. Recommandations investissement
    
    Basez-vous sur les tendances √©conomiques du S√©n√©gal.
    R√©pondez en JSON structur√©.
    `;

    const response = await this.makeRequest('/chat/completions', {
      model: this.model,
      messages: [{
        role: 'system', 
        content: 'Vous √™tes un analyste immobilier IA sp√©cialis√© dans le march√© s√©n√©galais.'
      }, {
        role: 'user',
        content: prompt
      }],
      max_tokens: 1200,
      temperature: 0.4
    });

    return this.parseMarketAnalysis(response);
  }

  // D√©tection de fraudes potentielles
  async detectFraud(transactionData) {
    const prompt = `
    Analysez cette transaction pour d√©tecter d'√©ventuelles fraudes:
    
    Montant: ${transactionData.amount}
    Utilisateur: ${transactionData.userProfile}
    Propri√©t√©: ${transactionData.propertyInfo}
    D√©lai: ${transactionData.timeframe}
    Historique: ${transactionData.userHistory}
    
    Calculez un score de risque (0-100) et identifiez les signaux d'alerte.
    R√©pondez en JSON avec recommandations d'action.
    `;

    const response = await this.makeRequest('/chat/completions', {
      model: this.model,
      messages: [{
        role: 'system',
        content: 'Vous √™tes un syst√®me de d√©tection de fraudes IA pour l\'immobilier.'
      }, {
        role: 'user', 
        content: prompt
      }],
      max_tokens: 800,
      temperature: 0.1
    });

    return this.parseFraudAnalysis(response);
  }

  // Assistant conversationnel intelligent
  async getChatResponse(userMessage, context = {}) {
    const systemPrompt = `
    Vous √™tes l'assistant IA de TerangaFoncier, plateforme immobili√®re s√©n√©galaise.
    
    Vous pouvez aider avec:
    - Recherche de propri√©t√©s
    - Conseils d'investissement
    - Proc√©dures administratives
    - √âvaluations de biens
    - Questions juridiques de base
    
    Contexte utilisateur: ${JSON.stringify(context)}
    
    R√©pondez de mani√®re utile, professionnelle et adapt√©e au march√© s√©n√©galais.
    `;

    const response = await this.makeRequest('/chat/completions', {
      model: this.model,
      messages: [{
        role: 'system',
        content: systemPrompt
      }, {
        role: 'user',
        content: userMessage
      }],
      max_tokens: 1000,
      temperature: 0.7
    });

    return response.choices?.[0]?.message?.content || 'D√©sol√©, je ne peux pas r√©pondre maintenant.';
  }

  // G√©n√©ration de recommandations personnalis√©es
  async getPersonalizedRecommendations(userProfile, preferences) {
    const prompt = `
    G√©n√©rez des recommandations immobili√®res personnalis√©es:
    
    Profil utilisateur:
    - Budget: ${userProfile.budget}
    - Localisation pr√©f√©r√©e: ${userProfile.preferredLocations}
    - Type de bien: ${userProfile.propertyTypes}
    - Objectif: ${userProfile.goal} (investissement/r√©sidence)
    
    Pr√©f√©rences:
    - Surface min: ${preferences.minSurface}
    - √âquipements: ${preferences.amenities}
    - Transport: ${preferences.transportation}
    
    Proposez 5 recommandations avec score de compatibilit√©.
    R√©pondez en JSON structur√©.
    `;

    const response = await this.makeRequest('/chat/completions', {
      model: this.model,
      messages: [{
        role: 'system',
        content: 'Vous √™tes un conseiller immobilier IA expert du march√© s√©n√©galais.'
      }, {
        role: 'user',
        content: prompt
      }],
      max_tokens: 1500,
      temperature: 0.5
    });

    return this.parseRecommendations(response);
  }

  // R√©ponses simul√©es pour d√©veloppement/d√©mo
  getSimulatedResponse(endpoint, data) {
    const simulatedResponses = {
      '/chat/completions': {
        choices: [{
          message: {
            content: JSON.stringify({
              status: 'simulated',
              message: 'R√©ponse simul√©e - Configurez votre cl√© API OpenAI pour des r√©ponses r√©elles',
              data: this.getSimulatedAnalysis(data)
            })
          }
        }]
      }
    };

    return simulatedResponses[endpoint] || { 
      choices: [{ message: { content: 'R√©ponse simul√©e non disponible' } }] 
    };
  }

  getSimulatedAnalysis(data) {
    return {
      score: Math.floor(Math.random() * 30) + 70, // Score entre 70-100
      estimation: 'Estimation simul√©e',
      trends: ['Croissance pr√©vue', 'Demande forte', 'Bon potentiel'],
      recommendations: ['Conseil simul√© 1', 'Conseil simul√© 2'],
      riskLevel: 'Faible'
    };
  }

  // Parsers pour structurer les r√©ponses IA
  parsePropertyAnalysis(response) {
    try {
      const content = response.choices?.[0]?.message?.content;
      return JSON.parse(content);
    } catch {
      return {
        score: 85,
        marketEstimate: 'Non disponible',
        strengths: ['Bien situ√©e', 'Prix attractif'],
        weaknesses: ['N√©cessite r√©novation'],
        recommendations: ['N√©gocier le prix', 'Pr√©voir budget travaux'],
        investmentPotential: 'Bon'
      };
    }
  }

  parseMarketAnalysis(response) {
    try {
      const content = response.choices?.[0]?.message?.content;
      return JSON.parse(content);
    } catch {
      return {
        priceEvolution: '+5-8%',
        demand: 'Forte pour r√©sidentiel',
        growingAreas: ['Almadies', 'Mermoz', 'Keur Massar'],
        influences: ['D√©veloppement infrastructure', 'Croissance √©conomique'],
        recommendations: ['Investir maintenant', 'Privil√©gier zones en d√©veloppement']
      };
    }
  }

  parseFraudAnalysis(response) {
    try {
      const content = response.choices?.[0]?.message?.content;
      return JSON.parse(content);
    } catch {
      return {
        riskScore: 15, // Score bas = faible risque
        alerts: [],
        recommendation: 'Transaction s√©curis√©e',
        requiresReview: false
      };
    }
  }

  parseRecommendations(response) {
    try {
      const content = response.choices?.[0]?.message?.content;
      return JSON.parse(content);
    } catch {
      return {
        recommendations: [
          {
            id: 1,
            title: 'Villa moderne - Almadies',
            compatibilityScore: 92,
            reason: 'Correspond parfaitement √† vos crit√®res'
          },
          {
            id: 2, 
            title: 'Appartement - Mermoz',
            compatibilityScore: 88,
            reason: 'Excellent rapport qualit√©-prix'
          }
        ]
      };
    }
  }
}

// Export de la classe et de l'instance
export { OpenAIService };
export default new OpenAIService();
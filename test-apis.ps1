# üß™ SCRIPT DE TEST DES APIS TERANGA FONCIER
# Usage: .\test-apis.ps1

Write-Host "üß™ TEST DES APIS TERANGA FONCIER" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Yellow

$API_BASE = "http://localhost:5000/api"
$HEALTH_URL = "http://localhost:5000/health"

# Variables pour stocker les tokens et IDs
$authToken = ""
$userId = ""
$propertyId = ""

# Fonction pour faire des requ√™tes HTTP
function Invoke-APIRequest {
    param(
        [string]$Method = "GET",
        [string]$Url,
        [hashtable]$Headers = @{},
        [object]$Body = $null,
        [string]$Description = ""
    )
    
    Write-Host "`nüîç $Description" -ForegroundColor Yellow
    Write-Host "   $Method $Url" -ForegroundColor Gray
    
    try {
        $requestParams = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
            ContentType = "application/json"
        }
        
        if ($Body) {
            if ($Body -is [hashtable] -or $Body -is [psobject]) {
                $requestParams.Body = $Body | ConvertTo-Json -Depth 3
            } else {
                $requestParams.Body = $Body
            }
        }
        
        $response = Invoke-RestMethod @requestParams
        Write-Host "   ‚úÖ Succ√®s" -ForegroundColor Green
        
        # Afficher un r√©sum√© de la r√©ponse
        if ($response.success) {
            Write-Host "   üìä Status: $($response.success)" -ForegroundColor White
            if ($response.message) {
                Write-Host "   üí¨ Message: $($response.message)" -ForegroundColor White
            }
        }
        
        return $response
    }
    catch {
        Write-Host "   ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
        if ($_.Exception.Response) {
            $statusCode = $_.Exception.Response.StatusCode.Value__
            Write-Host "   üìä Status Code: $statusCode" -ForegroundColor Red
        }
        return $null
    }
}

Write-Host "`nüè• 1. TEST HEALTH CHECK" -ForegroundColor Magenta
Write-Host "========================" -ForegroundColor Yellow

$healthResponse = Invoke-APIRequest -Method "GET" -Url $HEALTH_URL -Description "Health Check"

if (!$healthResponse) {
    Write-Host "‚ùå Le serveur ne r√©pond pas!" -ForegroundColor Red
    Write-Host "Assurez-vous que le serveur backend est d√©marr√©:" -ForegroundColor Yellow
    Write-Host "  cd backend && npm start" -ForegroundColor White
    exit 1
}

Write-Host "`nüîê 2. TEST AUTHENTIFICATION" -ForegroundColor Magenta
Write-Host "============================" -ForegroundColor Yellow

# Test d'inscription
$registerData = @{
    email = "test@teranga-foncier.com"
    password = "TestPassword123!"
    fullName = "Utilisateur Test"
    phone = "+221701234567"
    role = "particulier"
}

$registerResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/auth/register" -Body $registerData -Description "Inscription utilisateur"

if ($registerResponse -and $registerResponse.success) {
    $userId = $registerResponse.data.user.id
    Write-Host "   üë§ User ID: $userId" -ForegroundColor White
}

# Test de connexion
$loginData = @{
    email = "test@teranga-foncier.com"
    password = "TestPassword123!"
}

$loginResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/auth/login" -Body $loginData -Description "Connexion utilisateur"

if ($loginResponse -and $loginResponse.success) {
    $authToken = $loginResponse.data.token
    Write-Host "   üîë Token obtenu" -ForegroundColor White
} else {
    Write-Host "‚ùå Impossible d'obtenir le token d'authentification" -ForegroundColor Red
    Write-Host "Tests suivants seront limit√©s" -ForegroundColor Yellow
}

# Headers avec authentification
$authHeaders = @{
    "Authorization" = "Bearer $authToken"
    "Content-Type" = "application/json"
}

Write-Host "`nüë§ 3. TEST GESTION UTILISATEURS" -ForegroundColor Magenta
Write-Host "===============================" -ForegroundColor Yellow

if ($authToken) {
    # Test profile utilisateur
    $profileResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/users/profile" -Headers $authHeaders -Description "R√©cup√©ration profil"
    
    # Test mise √† jour profil
    $updateData = @{
        fullName = "Utilisateur Test Modifi√©"
        city = "Dakar"
        region = "Dakar"
    }
    
    $updateResponse = Invoke-APIRequest -Method "PUT" -Url "$API_BASE/users/profile" -Headers $authHeaders -Body $updateData -Description "Mise √† jour profil"
}

Write-Host "`nüè° 4. TEST GESTION PROPRI√âT√âS" -ForegroundColor Magenta
Write-Host "=============================" -ForegroundColor Yellow

if ($authToken) {
    # Cr√©er une propri√©t√© test
    $propertyData = @{
        title = "Villa Test √† Dakar"
        description = "Belle villa de test pour les APIs"
        propertyType = "maison"
        price = 50000000
        surface = 150
        location = "Almadies, Dakar"
        city = "Dakar"
        region = "Dakar"
        latitude = 14.7167
        longitude = -17.4833
        features = @{
            bedrooms = 3
            bathrooms = 2
            parking = "yes"
        }
    }
    
    $createPropertyResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/properties" -Headers $authHeaders -Body $propertyData -Description "Cr√©ation propri√©t√©"
    
    if ($createPropertyResponse -and $createPropertyResponse.success) {
        $propertyId = $createPropertyResponse.data.property.id
        Write-Host "   üè† Property ID: $propertyId" -ForegroundColor White
    }
    
    # Lister les propri√©t√©s
    $listResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/properties?page=1&limit=10" -Headers $authHeaders -Description "Liste des propri√©t√©s"
    
    # Recherche de propri√©t√©s
    $searchResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/properties/search?query=villa&city=Dakar" -Headers $authHeaders -Description "Recherche propri√©t√©s"
}

Write-Host "`nüìÑ 5. TEST GESTION DOCUMENTS" -ForegroundColor Magenta
Write-Host "============================" -ForegroundColor Yellow

if ($authToken) {
    # Simuler upload document (sans fichier r√©el)
    $documentData = @{
        documentType = "titre_foncier"
        description = "Document de test"
        propertyId = $propertyId
    }
    
    # Note: Test sans fichier r√©el pour √©viter les erreurs
    $documentsListResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/documents" -Headers $authHeaders -Description "Liste des documents"
}

Write-Host "`nüîî 6. TEST NOTIFICATIONS" -ForegroundColor Magenta
Write-Host "=========================" -ForegroundColor Yellow

if ($authToken) {
    # Lister notifications
    $notificationsResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/notifications" -Headers $authHeaders -Description "Liste des notifications"
    
    # Cr√©er une notification test
    $notificationData = @{
        title = "Test Notification"
        message = "Ceci est une notification de test"
        type = "info"
        priority = "normal"
    }
    
    # Note: Endpoint pour cr√©er notification (admin uniquement)
}

Write-Host "`nüìä 7. TEST DASHBOARD" -ForegroundColor Magenta
Write-Host "====================" -ForegroundColor Yellow

if ($authToken) {
    # Vue d'ensemble dashboard
    $dashboardResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/dashboard/overview" -Headers $authHeaders -Description "Vue d'ensemble dashboard"
    
    # Statistiques
    $statsResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/dashboard/stats/30d" -Headers $authHeaders -Description "Statistiques 30 jours"
}

Write-Host "`nüó∫Ô∏è 8. TEST CARTES" -ForegroundColor Magenta
Write-Host "=================" -ForegroundColor Yellow

if ($authToken) {
    # Recherche propri√©t√©s par zone
    $mapSearchResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/maps/properties/zone?bounds=14.6,17.3,14.8,17.5" -Headers $authHeaders -Description "Propri√©t√©s par zone"
    
    # G√©ocodage
    $geocodeData = @{
        address = "Place de l'Ind√©pendance, Dakar"
    }
    
    $geocodeResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/maps/geocode" -Headers $authHeaders -Body $geocodeData -Description "G√©ocodage adresse"
}

Write-Host "`nüí≥ 9. TEST PAIEMENTS" -ForegroundColor Magenta
Write-Host "====================" -ForegroundColor Yellow

if ($authToken) {
    # Historique paiements
    $paymentsResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/payments/history" -Headers $authHeaders -Description "Historique paiements"
    
    # Initier un paiement test
    $paymentData = @{
        amount = 1000
        type = "verification_fee"
        description = "Test de paiement API"
        propertyId = $propertyId
    }
    
    $paymentResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/payments/initiate" -Headers $authHeaders -Body $paymentData -Description "Initiation paiement"
}

Write-Host "`nüîó 10. TEST BLOCKCHAIN" -ForegroundColor Magenta
Write-Host "======================" -ForegroundColor Yellow

if ($authToken) {
    # Statut blockchain
    $blockchainStatusResponse = Invoke-APIRequest -Method "GET" -Url "$API_BASE/blockchain/status" -Headers $authHeaders -Description "Statut blockchain"
    
    # V√©rification propri√©t√© (simulation)
    if ($propertyId) {
        $verifyResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/blockchain/verify-property/$propertyId" -Headers $authHeaders -Description "V√©rification propri√©t√© blockchain"
    }
}

Write-Host "`nü§ñ 11. TEST IA" -ForegroundColor Magenta
Write-Host "===============" -ForegroundColor Yellow

if ($authToken) {
    # Test √©valuation propri√©t√©
    if ($propertyId) {
        $evaluationData = @{
            propertyId = $propertyId
            analysisType = "market_value"
        }
        
        $aiResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/ai/evaluate-property" -Headers $authHeaders -Body $evaluationData -Description "√âvaluation IA propri√©t√©"
    }
    
    # Test g√©n√©ration description
    $descriptionData = @{
        propertyType = "maison"
        surface = 150
        location = "Dakar"
        features = @{
            bedrooms = 3
            bathrooms = 2
        }
    }
    
    $descriptionResponse = Invoke-APIRequest -Method "POST" -Url "$API_BASE/ai/generate-description" -Headers $authHeaders -Body $descriptionData -Description "G√©n√©ration description IA"
}

Write-Host "`nüìà R√âSUM√â DES TESTS" -ForegroundColor Green
Write-Host "===================" -ForegroundColor Yellow

$totalTests = 11
$successfulTests = 0

# Comptage approximatif bas√© sur les r√©ponses re√ßues
if ($healthResponse) { $successfulTests++ }
if ($registerResponse -and $registerResponse.success) { $successfulTests++ }
if ($loginResponse -and $loginResponse.success) { $successfulTests++ }

Write-Host "üéØ Tests effectu√©s: $totalTests modules" -ForegroundColor White
Write-Host "‚úÖ Connexions r√©ussies: $successfulTests" -ForegroundColor Green

if ($authToken) {
    Write-Host "üîë Authentification: ‚úÖ Fonctionnelle" -ForegroundColor Green
} else {
    Write-Host "üîë Authentification: ‚ùå Probl√®me d√©tect√©" -ForegroundColor Red
}

if ($propertyId) {
    Write-Host "üè† Propri√©t√©s: ‚úÖ Cr√©ation r√©ussie" -ForegroundColor Green
} else {
    Write-Host "üè† Propri√©t√©s: ‚ö†Ô∏è Tests limit√©s" -ForegroundColor Yellow
}

Write-Host "`nüîß RECOMMANDATIONS:" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Yellow

Write-Host "1Ô∏è‚É£ Si des tests √©chouent:" -ForegroundColor White
Write-Host "   ‚Ä¢ V√©rifiez que la base de donn√©es est configur√©e" -ForegroundColor Gray
Write-Host "   ‚Ä¢ V√©rifiez les variables .env" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Consultez les logs du serveur" -ForegroundColor Gray

Write-Host "`n2Ô∏è‚É£ Pour tests complets:" -ForegroundColor White
Write-Host "   ‚Ä¢ Configurez les API Keys (OpenAI, Google AI)" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Configurez Redis pour le cache" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Configurez les param√®tres blockchain" -ForegroundColor Gray

Write-Host "`n3Ô∏è‚É£ Tests avanc√©s:" -ForegroundColor White
Write-Host "   ‚Ä¢ Upload de fichiers r√©els" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Int√©gration paiements mobiles" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Tests de performance" -ForegroundColor Gray

Write-Host "`n‚úÖ TESTS TERMIN√âS!" -ForegroundColor Green

Write-Host "`nüìö DOCUMENTATION API:" -ForegroundColor Cyan
Write-Host "Cr√©ez un fichier README-API.md avec tous les endpoints disponibles" -ForegroundColor White
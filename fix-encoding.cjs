const fs = require('fs');
const path = require('path');

// Mappings des caract√®res mal encod√©s
const replacements = {
  '√É¬®': '√®',
  '√É¬©': '√©', 
  '√É ': '√†',
  '√É¬¥': '√¥',
  '√É¬¢': '√¢',
  '√É¬π': '√π',
  '√É¬ª': '√ª',
  '√É¬Æ': '√Æ',
  '√É¬Ø': '√Ø',
  '√É¬´': '√´',
  '√É¬ß': '√ß',
  '√É‚Ä∞': '√â',
  '√É¬™': '√™',
  '√É≈†': '√ä',
  '√É‚Ç¨': '√Ä',
  '√É‚Ä°': '√á',
  '√É"': '√î',
  '√É‚Äö': '√Ç',
  '√É‚Ñ¢': '√ô',
  '√É‚Ä∫': '√õ',
  '√É≈Ω': '√é',
  '√É': '√è',
  '√¢≈ì‚Ä¶': '‚úÖ',
  '√¢≈í': '‚ùå',
  '√∞≈∏≈°¬™': 'üö™',
  '√∞≈∏"‚Äû': 'üîÑ'
};

// Fonction pour traiter un fichier
function fixFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let newContent = content;
    let hasChanges = false;
    
    // Appliquer les corrections
    Object.keys(replacements).forEach(badChar => {
      const goodChar = replacements[badChar];
      if (newContent.includes(badChar)) {
        newContent = newContent.split(badChar).join(goodChar);
        hasChanges = true;
      }
    });
    
    // Sauvegarder si modifi√©
    if (hasChanges) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`‚úÖ ${path.basename(filePath)} corrig√©`);
      return 1;
    }
    return 0;
  } catch (error) {
    console.error(`‚ùå Erreur avec ${filePath}:`, error.message);
    return 0;
  }
}

// Fonction r√©cursive pour parcourir les dossiers
function processDirectory(dir) {
  let filesFixed = 0;
  
  try {
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        // Ignorer certains dossiers
        if (!['node_modules', '.git', 'dist', 'build', '.next'].includes(item)) {
          filesFixed += processDirectory(fullPath);
        }
      } else if (stat.isFile()) {
        // Traiter les fichiers avec les bonnes extensions
        const ext = path.extname(item);
        if (['.js', '.jsx', '.ts', '.tsx', '.html', '.css'].includes(ext)) {
          filesFixed += fixFile(fullPath);
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå Erreur dossier ${dir}:`, error.message);
  }
  
  return filesFixed;
}

// Ex√©cution
console.log('üîß Correction des probl√®mes d\'encodage...');
const startTime = Date.now();
const filesFixed = processDirectory('.');
const duration = Date.now() - startTime;

console.log(`\nüìä R√©sultats:`);
console.log(`   ‚Ä¢ Fichiers corrig√©s: ${filesFixed}`);
console.log(`   ‚Ä¢ Temps: ${duration}ms`);
console.log(`\nüéâ Correction termin√©e!`);
-- ============================================
-- FIX FINAL - R√îLE CORRECT EN MINUSCULE
-- ============================================

-- ============================================
-- 1. CR√âER LE PROFIL AVEC 'particulier'
-- ============================================
DO $$
DECLARE
  v_email TEXT;
  v_full_name TEXT;
BEGIN
  -- R√©cup√©rer les infos du user
  SELECT 
    email,
    COALESCE(raw_user_meta_data->>'full_name', email)
  INTO v_email, v_full_name
  FROM auth.users
  WHERE id = '3f3083ba-4f40-4045-b6e6-7f009a6c2cb2';

  IF v_email IS NULL THEN
    RAISE NOTICE '‚ùå User introuvable dans auth.users';
    RETURN;
  END IF;

  -- Cr√©er le profil avec le r√¥le 'particulier' (en minuscules!)
  INSERT INTO public.profiles (
    id,
    email,
    role,
    full_name,
    created_at,
    updated_at
  ) VALUES (
    '3f3083ba-4f40-4045-b6e6-7f009a6c2cb2',
    v_email,
    'particulier',  -- ‚Üê EN MINUSCULES!
    v_full_name,
    NOW(),
    NOW()
  )
  ON CONFLICT (id) DO UPDATE SET
    email = EXCLUDED.email,
    role = 'particulier',
    full_name = EXCLUDED.full_name,
    updated_at = NOW();
  
  RAISE NOTICE '‚úÖ‚úÖ‚úÖ SUCC√àS! Profil cr√©√© avec r√¥le: particulier ‚úÖ‚úÖ‚úÖ';
  RAISE NOTICE 'Email: %', v_email;
  RAISE NOTICE 'Full name: %', v_full_name;
END $$;


-- ============================================
-- 2. AJOUTER COLONNE METADATA √Ä REQUESTS
-- ============================================
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
      AND table_name = 'requests' 
      AND column_name = 'metadata'
  ) THEN
    ALTER TABLE public.requests 
    ADD COLUMN metadata JSONB DEFAULT '{}'::jsonb;
    
    CREATE INDEX IF NOT EXISTS idx_requests_metadata 
    ON public.requests USING GIN (metadata);
    
    RAISE NOTICE '‚úÖ Colonne metadata ajout√©e √† requests';
  ELSE
    RAISE NOTICE '‚úì Colonne metadata existe d√©j√†';
  END IF;
  
  UPDATE public.requests 
  SET metadata = '{}'::jsonb 
  WHERE metadata IS NULL;
  
  RAISE NOTICE '‚úÖ Requests mises √† jour';
END $$;


-- ============================================
-- 3. CR√âER LA VIEW TICKETS ‚Üí SUPPORT_TICKETS
-- ============================================
DO $$
BEGIN
  CREATE OR REPLACE VIEW public.tickets AS
  SELECT * FROM public.support_tickets;

  GRANT SELECT, INSERT, UPDATE ON public.tickets TO authenticated;
  GRANT SELECT, INSERT, UPDATE ON public.tickets TO service_role;

  RAISE NOTICE '‚úÖ View tickets cr√©√©e';
END $$;


-- ============================================
-- 4. V√âRIFICATIONS FINALES
-- ============================================
-- V√©rifier le profil cr√©√©
SELECT 
  '‚úÖ PROFIL CR√â√â:' as info,
  id, 
  email, 
  role, 
  full_name,
  created_at
FROM profiles 
WHERE id = '3f3083ba-4f40-4045-b6e6-7f009a6c2cb2';

-- V√©rifier la colonne metadata
SELECT 
  '‚úÖ METADATA:' as info,
  column_name, 
  data_type,
  column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
  AND table_name = 'requests' 
  AND column_name = 'metadata';

-- V√©rifier la view tickets
SELECT 
  '‚úÖ VIEW TICKETS:' as info,
  COUNT(*) as nombre_tickets
FROM tickets;

-- Afficher les r√¥les valides pour r√©f√©rence
SELECT 
  'üìã R√îLES VALIDES:' as info,
  pg_get_constraintdef(oid) as definition
FROM pg_constraint
WHERE conrelid = 'public.profiles'::regclass
  AND conname LIKE '%role%';


-- ============================================
-- R√âSULTAT ATTENDU
-- ============================================
-- ‚úÖ‚úÖ‚úÖ SUCC√àS! Profil cr√©√© avec r√¥le: particulier
-- ‚úÖ Colonne metadata ajout√©e √† requests
-- ‚úÖ View tickets cr√©√©e
-- 
-- Puis 4 tables affichant:
-- 1. Le profil avec email, role='particulier', full_name
-- 2. La colonne metadata de type jsonb
-- 3. Le nombre de tickets (peut √™tre 0)
-- 4. La contrainte CHECK avec tous les r√¥les valides

#!/usr/bin/env pwsh

Write-Host "üîÑ TEST RAPIDE API TERANGA FONCIER" -ForegroundColor Cyan

# Test Health Check
Write-Host "`nüìä Test Health Check..." -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "http://localhost:3000/health" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Health: $($health.status) - $($health.message)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serveur non accessible" -ForegroundColor Red
    exit 1
}

# Test Database
Write-Host "`nüóÑÔ∏è Test Database..." -ForegroundColor Yellow
try {
    $db = Invoke-RestMethod -Uri "http://localhost:3000/db-test" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ DB: Users=$($db.users), Properties=$($db.properties)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Database inaccessible" -ForegroundColor Red
}

# Test Inscription
Write-Host "`nüë§ Test Inscription..." -ForegroundColor Yellow
$userData = @{
    email = "test$(Get-Random)@terangafoncier.com"
    password = "test123"
    nom = "Test"
    prenom = "User"
} | ConvertTo-Json

try {
    $signup = Invoke-RestMethod -Uri "http://localhost:3000/api/auth/inscription" -Method POST -Body $userData -ContentType "application/json" -TimeoutSec 5
    Write-Host "‚úÖ Inscription: User ID $($signup.user.id) cr√©√©" -ForegroundColor Green
    $global:token = $signup.token
} catch {
    Write-Host "‚ö†Ô∏è Inscription: $($_.Exception.Response.StatusCode)" -ForegroundColor Yellow
}

# Test Liste Propri√©t√©s
Write-Host "`nüìã Test Liste Propri√©t√©s..." -ForegroundColor Yellow
try {
    $properties = Invoke-RestMethod -Uri "http://localhost:3000/api/properties" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Propri√©t√©s: $($properties.count) trouv√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Liste propri√©t√©s √©chou√©e" -ForegroundColor Red
}

Write-Host "`nüéâ TESTS TERMIN√âS - API FONCTIONNELLE !" -ForegroundColor Green